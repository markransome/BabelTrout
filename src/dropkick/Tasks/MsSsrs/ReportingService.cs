// Copyright 2007-2010 The Apache Software Foundation.
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use 
// this file except in compliance with the License. You may obtain a copy of the 
// License at 
// 
//     http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software distributed 
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
// CONDITIONS OF ANY KIND, either express or implied. See the License for the 
// specific language governing permissions and limitations under the License.
namespace dropkick.Tasks.MsSrss
{
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Threading;
    using System.Web.Services;
    using System.Web.Services.Description;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

#pragma warning disable 649, 1717

    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.42.
    // 


    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "ReportingServiceSoap",
        Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [XmlInclude(typeof (DataSourceDefinitionOrReference))]
    [XmlInclude(typeof (ExpirationDefinition))]
    [XmlInclude(typeof (RecurrencePattern))]
    [XmlInclude(typeof (ScheduleDefinitionOrReference))]
    public class ReportingService : SoapHttpClientProtocol
    {
        SendOrPostCallback _cancelBatchOperationCompleted;
        SendOrPostCallback _cancelJobOperationCompleted;
        SendOrPostCallback _createBatchOperationCompleted;
        SendOrPostCallback _createDataDrivenSubscriptionOperationCompleted;
        SendOrPostCallback _createDataSourceOperationCompleted;

        SendOrPostCallback _createFolderOperationCompleted;
        SendOrPostCallback _createLinkedReportOperationCompleted;
        SendOrPostCallback _createReportHistorySnapshotOperationCompleted;

        SendOrPostCallback _createReportOperationCompleted;

        SendOrPostCallback _createResourceOperationCompleted;
        SendOrPostCallback _createRoleOperationCompleted;
        SendOrPostCallback _createScheduleOperationCompleted;
        SendOrPostCallback _createSubscriptionOperationCompleted;
        SendOrPostCallback _deleteItemOperationCompleted;
        SendOrPostCallback _deleteReportHistorySnapshotOperationCompleted;
        SendOrPostCallback _deleteRoleOperationCompleted;
        SendOrPostCallback _deleteScheduleOperationCompleted;
        SendOrPostCallback _deleteSubscriptionOperationCompleted;
        SendOrPostCallback _disableDataSourceOperationCompleted;
        SendOrPostCallback _enableDataSourceOperationCompleted;
        SendOrPostCallback _executeBatchOperationCompleted;
        SendOrPostCallback _findItemsOperationCompleted;
        SendOrPostCallback _fireEventOperationCompleted;

        SendOrPostCallback _flushCacheOperationCompleted;
        SendOrPostCallback _getCacheOptionsOperationCompleted;
        SendOrPostCallback _getDataDrivenSubscriptionPropertiesOperationCompleted;

        SendOrPostCallback _getDataSourceContentsOperationCompleted;
        SendOrPostCallback _getExecutionOptionsOperationCompleted;
        SendOrPostCallback _getExtensionSettingsOperationCompleted;
        SendOrPostCallback _getItemTypeOperationCompleted;
        SendOrPostCallback _getPermissionsOperationCompleted;
        SendOrPostCallback _getPoliciesOperationCompleted;
        SendOrPostCallback _getPropertiesOperationCompleted;
        SendOrPostCallback _getRenderResourceOperationCompleted;

        SendOrPostCallback _getReportDataSourcePromptsOperationCompleted;
        SendOrPostCallback _getReportDataSourcesOperationCompleted;
        SendOrPostCallback _getReportDefinitionOperationCompleted;

        SendOrPostCallback _getReportHistoryLimitOperationCompleted;
        SendOrPostCallback _getReportHistoryOptionsOperationCompleted;
        SendOrPostCallback _getReportLinkOperationCompleted;
        SendOrPostCallback _getReportParametersOperationCompleted;
        SendOrPostCallback _getResourceContentsOperationCompleted;
        SendOrPostCallback _getRolePropertiesOperationCompleted;

        SendOrPostCallback _getSchedulePropertiesOperationCompleted;
        SendOrPostCallback _getSubscriptionPropertiesOperationCompleted;
        SendOrPostCallback _getSystemPermissionsOperationCompleted;
        SendOrPostCallback _getSystemPoliciesOperationCompleted;
        SendOrPostCallback _getSystemPropertiesOperationCompleted;
        SendOrPostCallback _inheritParentSecurityOperationCompleted;
        SendOrPostCallback _listChildrenOperationCompleted;
        SendOrPostCallback _listEventsOperationCompleted;
        SendOrPostCallback _listExtensionsOperationCompleted;
        SendOrPostCallback _listJobsOperationCompleted;
        SendOrPostCallback _listLinkedReportsOperationCompleted;
        SendOrPostCallback _listReportHistoryOperationCompleted;
        SendOrPostCallback _listReportsUsingDataSourceOperationCompleted;
        SendOrPostCallback _listRolesOperationCompleted;

        SendOrPostCallback _listScheduledReportsOperationCompleted;

        SendOrPostCallback _listSchedulesOperationCompleted;
        SendOrPostCallback _listSecureMethodsOperationCompleted;

        SendOrPostCallback _listSubscriptionsOperationCompleted;

        SendOrPostCallback _listSubscriptionsUsingDataSourceOperationCompleted;
        SendOrPostCallback _listSystemRolesOperationCompleted;

        SendOrPostCallback _listSystemTasksOperationCompleted;

        SendOrPostCallback _listTasksOperationCompleted;
        SendOrPostCallback _logoffOperationCompleted;
        SendOrPostCallback _logonUserOperationCompleted;
        SendOrPostCallback _moveItemOperationCompleted;
        SendOrPostCallback _pauseScheduleOperationCompleted;
        SendOrPostCallback _prepareQueryOperationCompleted;
        SendOrPostCallback _renderOperationCompleted;

        SendOrPostCallback _renderStreamOperationCompleted;
        SendOrPostCallback _resumeScheduleOperationCompleted;
        SendOrPostCallback _setCacheOptionsOperationCompleted;
        SendOrPostCallback _setDataDrivenSubscriptionPropertiesOperationCompleted;
        SendOrPostCallback _setDataSourceContentsOperationCompleted;
        SendOrPostCallback _setExecutionOptionsOperationCompleted;
        SendOrPostCallback _setPoliciesOperationCompleted;
        SendOrPostCallback _setPropertiesOperationCompleted;
        SendOrPostCallback _setReportDataSourcesOperationCompleted;
        SendOrPostCallback _setReportDefinitionOperationCompleted;
        SendOrPostCallback _setReportHistoryLimitOperationCompleted;
        SendOrPostCallback _setReportHistoryOptionsOperationCompleted;
        SendOrPostCallback _setReportLinkOperationCompleted;
        SendOrPostCallback _setReportParametersOperationCompleted;
        SendOrPostCallback _setResourceContentsOperationCompleted;

        SendOrPostCallback _setRolePropertiesOperationCompleted;
        SendOrPostCallback _setSchedulePropertiesOperationCompleted;
        SendOrPostCallback _setSubscriptionPropertiesOperationCompleted;

        SendOrPostCallback _setSystemPoliciesOperationCompleted;
        SendOrPostCallback _setSystemPropertiesOperationCompleted;
        SendOrPostCallback _updateReportExecutionSnapshotOperationCompleted;
        SendOrPostCallback _validateExtensionSettingsOperationCompleted;

        /// <remarks/>
        public ReportingService()
        {
            Url = "http://srvtest03/ReportServer/ReportService.asmx";
        }

        public ServerInfoHeader ServerInfoHeaderValue { get; set; }

        public BatchHeader BatchHeaderValue { get; set; }

        public ItemNamespaceHeader ItemNamespaceHeaderValue { get; set; }

        public SessionHeader SessionHeaderValue { get; set; }

        /// <remarks/>
        public event ListSecureMethodsCompletedEventHandler ListSecureMethodsCompleted;

        /// <remarks/>
        public event CreateBatchCompletedEventHandler CreateBatchCompleted;

        /// <remarks/>
        public event CancelBatchCompletedEventHandler CancelBatchCompleted;

        /// <remarks/>
        public event ExecuteBatchCompletedEventHandler ExecuteBatchCompleted;

        /// <remarks/>
        public event GetSystemPropertiesCompletedEventHandler GetSystemPropertiesCompleted;

        /// <remarks/>
        public event SetSystemPropertiesCompletedEventHandler SetSystemPropertiesCompleted;

        /// <remarks/>
        public event DeleteItemCompletedEventHandler DeleteItemCompleted;

        /// <remarks/>
        public event MoveItemCompletedEventHandler MoveItemCompleted;

        /// <remarks/>
        public event ListChildrenCompletedEventHandler ListChildrenCompleted;

        /// <remarks/>
        public event GetPropertiesCompletedEventHandler GetPropertiesCompleted;

        /// <remarks/>
        public event SetPropertiesCompletedEventHandler SetPropertiesCompleted;

        /// <remarks/>
        public event GetItemTypeCompletedEventHandler GetItemTypeCompleted;

        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;

        /// <remarks/>
        public event CreateReportCompletedEventHandler CreateReportCompleted;

        /// <remarks/>
        public event GetReportDefinitionCompletedEventHandler GetReportDefinitionCompleted;

        /// <remarks/>
        public event SetReportDefinitionCompletedEventHandler SetReportDefinitionCompleted;

        /// <remarks/>
        public event CreateResourceCompletedEventHandler CreateResourceCompleted;

        /// <remarks/>
        public event SetResourceContentsCompletedEventHandler SetResourceContentsCompleted;

        /// <remarks/>
        public event GetResourceContentsCompletedEventHandler GetResourceContentsCompleted;

        /// <remarks/>
        public event GetReportParametersCompletedEventHandler GetReportParametersCompleted;

        /// <remarks/>
        public event SetReportParametersCompletedEventHandler SetReportParametersCompleted;

        /// <remarks/>
        public event CreateLinkedReportCompletedEventHandler CreateLinkedReportCompleted;

        /// <remarks/>
        public event GetReportLinkCompletedEventHandler GetReportLinkCompleted;

        /// <remarks/>
        public event SetReportLinkCompletedEventHandler SetReportLinkCompleted;

        /// <remarks/>
        public event ListLinkedReportsCompletedEventHandler ListLinkedReportsCompleted;

        /// <remarks/>
        public event RenderCompletedEventHandler RenderCompleted;

        /// <remarks/>
        public event RenderStreamCompletedEventHandler RenderStreamCompleted;

        /// <remarks/>
        public event GetRenderResourceCompletedEventHandler GetRenderResourceCompleted;

        /// <remarks/>
        public event SetExecutionOptionsCompletedEventHandler SetExecutionOptionsCompleted;

        /// <remarks/>
        public event GetExecutionOptionsCompletedEventHandler GetExecutionOptionsCompleted;

        /// <remarks/>
        public event SetCacheOptionsCompletedEventHandler SetCacheOptionsCompleted;

        /// <remarks/>
        public event GetCacheOptionsCompletedEventHandler GetCacheOptionsCompleted;

        /// <remarks/>
        public event UpdateReportExecutionSnapshotCompletedEventHandler UpdateReportExecutionSnapshotCompleted;

        /// <remarks/>
        public event FlushCacheCompletedEventHandler FlushCacheCompleted;

        /// <remarks/>
        public event ListJobsCompletedEventHandler ListJobsCompleted;

        /// <remarks/>
        public event CancelJobCompletedEventHandler CancelJobCompleted;

        /// <remarks/>
        public event CreateDataSourceCompletedEventHandler CreateDataSourceCompleted;

        /// <remarks/>
        public event GetDataSourceContentsCompletedEventHandler GetDataSourceContentsCompleted;

        /// <remarks/>
        public event SetDataSourceContentsCompletedEventHandler SetDataSourceContentsCompleted;

        /// <remarks/>
        public event EnableDataSourceCompletedEventHandler EnableDataSourceCompleted;

        /// <remarks/>
        public event DisableDataSourceCompletedEventHandler DisableDataSourceCompleted;

        /// <remarks/>
        public event ListReportsUsingDataSourceCompletedEventHandler ListReportsUsingDataSourceCompleted;

        /// <remarks/>
        public event SetReportDataSourcesCompletedEventHandler SetReportDataSourcesCompleted;

        /// <remarks/>
        public event GetReportDataSourcesCompletedEventHandler GetReportDataSourcesCompleted;

        /// <remarks/>
        public event GetReportDataSourcePromptsCompletedEventHandler GetReportDataSourcePromptsCompleted;

        /// <remarks/>
        public event CreateReportHistorySnapshotCompletedEventHandler CreateReportHistorySnapshotCompleted;

        /// <remarks/>
        public event SetReportHistoryOptionsCompletedEventHandler SetReportHistoryOptionsCompleted;

        /// <remarks/>
        public event GetReportHistoryOptionsCompletedEventHandler GetReportHistoryOptionsCompleted;

        /// <remarks/>
        public event SetReportHistoryLimitCompletedEventHandler SetReportHistoryLimitCompleted;

        /// <remarks/>
        public event GetReportHistoryLimitCompletedEventHandler GetReportHistoryLimitCompleted;

        /// <remarks/>
        public event ListReportHistoryCompletedEventHandler ListReportHistoryCompleted;

        /// <remarks/>
        public event DeleteReportHistorySnapshotCompletedEventHandler DeleteReportHistorySnapshotCompleted;

        /// <remarks/>
        public event FindItemsCompletedEventHandler FindItemsCompleted;

        /// <remarks/>
        public event CreateScheduleCompletedEventHandler CreateScheduleCompleted;

        /// <remarks/>
        public event DeleteScheduleCompletedEventHandler DeleteScheduleCompleted;

        /// <remarks/>
        public event SetSchedulePropertiesCompletedEventHandler SetSchedulePropertiesCompleted;

        /// <remarks/>
        public event GetSchedulePropertiesCompletedEventHandler GetSchedulePropertiesCompleted;

        /// <remarks/>
        public event ListScheduledReportsCompletedEventHandler ListScheduledReportsCompleted;

        /// <remarks/>
        public event ListSchedulesCompletedEventHandler ListSchedulesCompleted;

        /// <remarks/>
        public event PauseScheduleCompletedEventHandler PauseScheduleCompleted;

        /// <remarks/>
        public event ResumeScheduleCompletedEventHandler ResumeScheduleCompleted;

        /// <remarks/>
        public event CreateSubscriptionCompletedEventHandler CreateSubscriptionCompleted;

        /// <remarks/>
        public event CreateDataDrivenSubscriptionCompletedEventHandler CreateDataDrivenSubscriptionCompleted;

        /// <remarks/>
        public event SetSubscriptionPropertiesCompletedEventHandler SetSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event SetDataDrivenSubscriptionPropertiesCompletedEventHandler
            SetDataDrivenSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event GetSubscriptionPropertiesCompletedEventHandler GetSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event GetDataDrivenSubscriptionPropertiesCompletedEventHandler
            GetDataDrivenSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event DeleteSubscriptionCompletedEventHandler DeleteSubscriptionCompleted;

        /// <remarks/>
        public event PrepareQueryCompletedEventHandler PrepareQueryCompleted;

        /// <remarks/>
        public event GetExtensionSettingsCompletedEventHandler GetExtensionSettingsCompleted;

        /// <remarks/>
        public event ValidateExtensionSettingsCompletedEventHandler ValidateExtensionSettingsCompleted;

        /// <remarks/>
        public event ListSubscriptionsCompletedEventHandler ListSubscriptionsCompleted;

        /// <remarks/>
        public event ListSubscriptionsUsingDataSourceCompletedEventHandler ListSubscriptionsUsingDataSourceCompleted;

        /// <remarks/>
        public event ListExtensionsCompletedEventHandler ListExtensionsCompleted;

        /// <remarks/>
        public event ListEventsCompletedEventHandler ListEventsCompleted;

        /// <remarks/>
        public event FireEventCompletedEventHandler FireEventCompleted;

        /// <remarks/>
        public event ListSystemTasksCompletedEventHandler ListSystemTasksCompleted;

        /// <remarks/>
        public event ListTasksCompletedEventHandler ListTasksCompleted;

        /// <remarks/>
        public event ListSystemRolesCompletedEventHandler ListSystemRolesCompleted;

        /// <remarks/>
        public event ListRolesCompletedEventHandler ListRolesCompleted;

        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;

        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;

        /// <remarks/>
        public event GetRolePropertiesCompletedEventHandler GetRolePropertiesCompleted;

        /// <remarks/>
        public event SetRolePropertiesCompletedEventHandler SetRolePropertiesCompleted;

        /// <remarks/>
        public event GetSystemPoliciesCompletedEventHandler GetSystemPoliciesCompleted;

        /// <remarks/>
        public event SetSystemPoliciesCompletedEventHandler SetSystemPoliciesCompleted;

        /// <remarks/>
        public event GetPoliciesCompletedEventHandler GetPoliciesCompleted;

        /// <remarks/>
        public event SetPoliciesCompletedEventHandler SetPoliciesCompleted;

        /// <remarks/>
        public event InheritParentSecurityCompletedEventHandler InheritParentSecurityCompleted;

        /// <remarks/>
        public event GetSystemPermissionsCompletedEventHandler GetSystemPermissionsCompleted;

        /// <remarks/>
        public event GetPermissionsCompletedEventHandler GetPermissionsCompleted;

        /// <remarks/>
        public event LogonUserCompletedEventHandler LogonUserCompleted;

        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSe" +
                            "cureMethods",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string[] ListSecureMethods()
        {
            object[] results = Invoke("ListSecureMethods", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSecureMethods(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListSecureMethods", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndListSecureMethods(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void ListSecureMethodsAsync()
        {
            ListSecureMethodsAsync(null);
        }

        /// <remarks/>
        public void ListSecureMethodsAsync(object userState)
        {
            if ((_listSecureMethodsOperationCompleted == null))
            {
                _listSecureMethodsOperationCompleted = new SendOrPostCallback(OnListSecureMethodsOperationCompleted);
            }
            InvokeAsync("ListSecureMethods", new object[0], _listSecureMethodsOperationCompleted, userState);
        }

        void OnListSecureMethodsOperationCompleted(object arg)
        {
            if ((ListSecureMethodsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSecureMethodsCompleted(this,
                                           new ListSecureMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Batch",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("BatchID")]
        public string CreateBatch()
        {
            object[] results = Invoke("CreateBatch", new object[0]);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateBatch(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateBatch", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateBatch(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CreateBatchAsync()
        {
            CreateBatchAsync(null);
        }

        /// <remarks/>
        public void CreateBatchAsync(object userState)
        {
            if ((_createBatchOperationCompleted == null))
            {
                _createBatchOperationCompleted = new SendOrPostCallback(OnCreateBatchOperationCompleted);
            }
            InvokeAsync("CreateBatch", new object[0], _createBatchOperationCompleted, userState);
        }

        void OnCreateBatchOperationCompleted(object arg)
        {
            if ((CreateBatchCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateBatchCompleted(this,
                                     new CreateBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
                            "Batch",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CancelBatch()
        {
            Invoke("CancelBatch", new object[0]);
        }

        /// <remarks/>
        public IAsyncResult BeginCancelBatch(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CancelBatch", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndCancelBatch(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CancelBatchAsync()
        {
            CancelBatchAsync(null);
        }

        /// <remarks/>
        public void CancelBatchAsync(object userState)
        {
            if ((_cancelBatchOperationCompleted == null))
            {
                _cancelBatchOperationCompleted = new SendOrPostCallback(OnCancelBatchOperationCompleted);
            }
            InvokeAsync("CancelBatch", new object[0], _cancelBatchOperationCompleted, userState);
        }

        void OnCancelBatchOperationCompleted(object arg)
        {
            if ((CancelBatchCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CancelBatchCompleted(this,
                                     new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Execut" +
                            "eBatch",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void ExecuteBatch()
        {
            Invoke("ExecuteBatch", new object[0]);
        }

        /// <remarks/>
        public IAsyncResult BeginExecuteBatch(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ExecuteBatch", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndExecuteBatch(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ExecuteBatchAsync()
        {
            ExecuteBatchAsync(null);
        }

        /// <remarks/>
        public void ExecuteBatchAsync(object userState)
        {
            if ((_executeBatchOperationCompleted == null))
            {
                _executeBatchOperationCompleted = new SendOrPostCallback(OnExecuteBatchOperationCompleted);
            }
            InvokeAsync("ExecuteBatch", new object[0], _executeBatchOperationCompleted, userState);
        }

        void OnExecuteBatchOperationCompleted(object arg)
        {
            if ((ExecuteBatchCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ExecuteBatchCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                            "temProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Values")]
        public Property[] GetSystemProperties(Property[] properties)
        {
            object[] results = Invoke("GetSystemProperties", new object[]
                                                                 {
                                                                     properties
                                                                 });
            return ((Property[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetSystemProperties(Property[] properties, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetSystemProperties", new object[]
                                                          {
                                                              properties
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public Property[] EndGetSystemProperties(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Property[]) (results[0]));
        }

        /// <remarks/>
        public void GetSystemPropertiesAsync(Property[] properties)
        {
            GetSystemPropertiesAsync(properties, null);
        }

        /// <remarks/>
        public void GetSystemPropertiesAsync(Property[] properties, object userState)
        {
            if ((_getSystemPropertiesOperationCompleted == null))
            {
                _getSystemPropertiesOperationCompleted = new SendOrPostCallback(OnGetSystemPropertiesOperationCompleted);
            }
            InvokeAsync("GetSystemProperties", new object[]
                                                   {
                                                       properties
                                                   }, _getSystemPropertiesOperationCompleted, userState);
        }

        void OnGetSystemPropertiesOperationCompleted(object arg)
        {
            if ((GetSystemPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetSystemPropertiesCompleted(this,
                                             new GetSystemPropertiesCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
                            "temProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetSystemProperties(Property[] properties)
        {
            Invoke("SetSystemProperties", new object[]
                                              {
                                                  properties
                                              });
        }

        /// <remarks/>
        public IAsyncResult BeginSetSystemProperties(Property[] properties, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetSystemProperties", new object[]
                                                          {
                                                              properties
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetSystemProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetSystemPropertiesAsync(Property[] properties)
        {
            SetSystemPropertiesAsync(properties, null);
        }

        /// <remarks/>
        public void SetSystemPropertiesAsync(Property[] properties, object userState)
        {
            if ((_setSystemPropertiesOperationCompleted == null))
            {
                _setSystemPropertiesOperationCompleted = new SendOrPostCallback(OnSetSystemPropertiesOperationCompleted);
            }
            InvokeAsync("SetSystemProperties", new object[]
                                                   {
                                                       properties
                                                   }, _setSystemPropertiesOperationCompleted, userState);
        }

        void OnSetSystemPropertiesOperationCompleted(object arg)
        {
            if ((SetSystemPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetSystemPropertiesCompleted(this,
                                             new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                            "Item",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteItem(string item)
        {
            Invoke("DeleteItem", new object[]
                                     {
                                         item
                                     });
        }

        /// <remarks/>
        public IAsyncResult BeginDeleteItem(string item, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("DeleteItem", new object[]
                                                 {
                                                     item
                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteItem(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteItemAsync(string item)
        {
            DeleteItemAsync(item, null);
        }

        /// <remarks/>
        public void DeleteItemAsync(string item, object userState)
        {
            if ((_deleteItemOperationCompleted == null))
            {
                _deleteItemOperationCompleted = new SendOrPostCallback(OnDeleteItemOperationCompleted);
            }
            InvokeAsync("DeleteItem", new object[]
                                          {
                                              item
                                          }, _deleteItemOperationCompleted, userState);
        }

        void OnDeleteItemOperationCompleted(object arg)
        {
            if ((DeleteItemCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteItemCompleted(this,
                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/MoveIt" +
                            "em",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void MoveItem(string item, string target)
        {
            Invoke("MoveItem", new object[]
                                   {
                                       item,
                                       target
                                   });
        }

        /// <remarks/>
        public IAsyncResult BeginMoveItem(string item, string target, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("MoveItem", new object[]
                                               {
                                                   item,
                                                   target
                                               }, callback, asyncState);
        }

        /// <remarks/>
        public void EndMoveItem(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void MoveItemAsync(string item, string target)
        {
            MoveItemAsync(item, target, null);
        }

        /// <remarks/>
        public void MoveItemAsync(string item, string target, object userState)
        {
            if ((_moveItemOperationCompleted == null))
            {
                _moveItemOperationCompleted = new SendOrPostCallback(OnMoveItemOperationCompleted);
            }
            InvokeAsync("MoveItem", new object[]
                                        {
                                            item,
                                            target
                                        }, _moveItemOperationCompleted, userState);
        }

        void OnMoveItemOperationCompleted(object arg)
        {
            if ((MoveItemCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                MoveItemCompleted(this,
                                  new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                              invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListCh" +
                            "ildren",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("CatalogItems")]
        public CatalogItem[] ListChildren(string item, bool recursive)
        {
            object[] results = Invoke("ListChildren", new object[]
                                                          {
                                                              item,
                                                              recursive
                                                          });
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListChildren(string item, bool recursive, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListChildren", new object[]
                                                   {
                                                       item,
                                                       recursive
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public CatalogItem[] EndListChildren(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public void ListChildrenAsync(string item, bool recursive)
        {
            ListChildrenAsync(item, recursive, null);
        }

        /// <remarks/>
        public void ListChildrenAsync(string item, bool recursive, object userState)
        {
            if ((_listChildrenOperationCompleted == null))
            {
                _listChildrenOperationCompleted = new SendOrPostCallback(OnListChildrenOperationCompleted);
            }
            InvokeAsync("ListChildren", new object[]
                                            {
                                                item,
                                                recursive
                                            }, _listChildrenOperationCompleted, userState);
        }

        void OnListChildrenOperationCompleted(object arg)
        {
            if ((ListChildrenCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListChildrenCompleted(this,
                                      new ListChildrenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("ItemNamespaceHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPro" +
                            "perties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Values")]
        public Property[] GetProperties(string item, Property[] properties)
        {
            object[] results = Invoke("GetProperties", new object[]
                                                           {
                                                               item,
                                                               properties
                                                           });
            return ((Property[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetProperties(string item, Property[] properties, AsyncCallback callback,
                                               object asyncState)
        {
            return BeginInvoke("GetProperties", new object[]
                                                    {
                                                        item,
                                                        properties
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public Property[] EndGetProperties(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Property[]) (results[0]));
        }

        /// <remarks/>
        public void GetPropertiesAsync(string item, Property[] properties)
        {
            GetPropertiesAsync(item, properties, null);
        }

        /// <remarks/>
        public void GetPropertiesAsync(string item, Property[] properties, object userState)
        {
            if ((_getPropertiesOperationCompleted == null))
            {
                _getPropertiesOperationCompleted = new SendOrPostCallback(OnGetPropertiesOperationCompleted);
            }
            InvokeAsync("GetProperties", new object[]
                                             {
                                                 item,
                                                 properties
                                             }, _getPropertiesOperationCompleted, userState);
        }

        void OnGetPropertiesOperationCompleted(object arg)
        {
            if ((GetPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetPropertiesCompleted(this,
                                       new GetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPro" +
                            "perties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetProperties(string item, Property[] properties)
        {
            Invoke("SetProperties", new object[]
                                        {
                                            item,
                                            properties
                                        });
        }

        /// <remarks/>
        public IAsyncResult BeginSetProperties(string item, Property[] properties, AsyncCallback callback,
                                               object asyncState)
        {
            return BeginInvoke("SetProperties", new object[]
                                                    {
                                                        item,
                                                        properties
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetPropertiesAsync(string item, Property[] properties)
        {
            SetPropertiesAsync(item, properties, null);
        }

        /// <remarks/>
        public void SetPropertiesAsync(string item, Property[] properties, object userState)
        {
            if ((_setPropertiesOperationCompleted == null))
            {
                _setPropertiesOperationCompleted = new SendOrPostCallback(OnSetPropertiesOperationCompleted);
            }
            InvokeAsync("SetProperties", new object[]
                                             {
                                                 item,
                                                 properties
                                             }, _setPropertiesOperationCompleted, userState);
        }

        void OnSetPropertiesOperationCompleted(object arg)
        {
            if ((SetPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetPropertiesCompleted(this,
                                       new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetIte" +
                            "mType",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Type")]
        public ItemTypeEnum GetItemType(string item)
        {
            object[] results = Invoke("GetItemType", new object[]
                                                         {
                                                             item
                                                         });
            return ((ItemTypeEnum) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetItemType(string item, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetItemType", new object[]
                                                  {
                                                      item
                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public ItemTypeEnum EndGetItemType(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((ItemTypeEnum) (results[0]));
        }

        /// <remarks/>
        public void GetItemTypeAsync(string item)
        {
            GetItemTypeAsync(item, null);
        }

        /// <remarks/>
        public void GetItemTypeAsync(string item, object userState)
        {
            if ((_getItemTypeOperationCompleted == null))
            {
                _getItemTypeOperationCompleted = new SendOrPostCallback(OnGetItemTypeOperationCompleted);
            }
            InvokeAsync("GetItemType", new object[]
                                           {
                                               item
                                           }, _getItemTypeOperationCompleted, userState);
        }

        void OnGetItemTypeOperationCompleted(object arg)
        {
            if ((GetItemTypeCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetItemTypeCompleted(this,
                                     new GetItemTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Folder",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CreateFolder(string folder, string parent, Property[] properties)
        {
            Invoke("CreateFolder", new object[]
                                       {
                                           folder,
                                           parent,
                                           properties
                                       });
        }

        /// <remarks/>
        public IAsyncResult BeginCreateFolder(string folder, string parent, Property[] properties,
                                              AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateFolder", new object[]
                                                   {
                                                       folder,
                                                       parent,
                                                       properties
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateFolder(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateFolderAsync(string folder, string parent, Property[] properties)
        {
            CreateFolderAsync(folder, parent, properties, null);
        }

        /// <remarks/>
        public void CreateFolderAsync(string folder, string parent, Property[] properties, object userState)
        {
            if ((_createFolderOperationCompleted == null))
            {
                _createFolderOperationCompleted = new SendOrPostCallback(OnCreateFolderOperationCompleted);
            }
            InvokeAsync("CreateFolder", new object[]
                                            {
                                                folder,
                                                parent,
                                                properties
                                            }, _createFolderOperationCompleted, userState);
        }

        void OnCreateFolderOperationCompleted(object arg)
        {
            if ((CreateFolderCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateFolderCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Report",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Warnings")]
        public Warning[] CreateReport(string report, string parent, bool overwrite,
                                      [XmlElement(DataType = "base64Binary")] byte[] definition, Property[] properties)
        {
            object[] results = Invoke("CreateReport", new object[]
                                                          {
                                                              report,
                                                              parent,
                                                              overwrite,
                                                              definition,
                                                              properties
                                                          });
            return ((Warning[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateReport(string report, string parent, bool overwrite, byte[] definition,
                                              Property[] properties, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateReport", new object[]
                                                   {
                                                       report,
                                                       parent,
                                                       overwrite,
                                                       definition,
                                                       properties
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public Warning[] EndCreateReport(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Warning[]) (results[0]));
        }

        /// <remarks/>
        public void CreateReportAsync(string report, string parent, bool overwrite, byte[] definition,
                                      Property[] properties)
        {
            CreateReportAsync(report, parent, overwrite, definition, properties, null);
        }

        /// <remarks/>
        public void CreateReportAsync(string report, string parent, bool overwrite, byte[] definition,
                                      Property[] properties, object userState)
        {
            if ((_createReportOperationCompleted == null))
            {
                _createReportOperationCompleted = new SendOrPostCallback(OnCreateReportOperationCompleted);
            }
            InvokeAsync("CreateReport", new object[]
                                            {
                                                report,
                                                parent,
                                                overwrite,
                                                definition,
                                                properties
                                            }, _createReportOperationCompleted, userState);
        }

        void OnCreateReportOperationCompleted(object arg)
        {
            if ((CreateReportCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateReportCompleted(this,
                                      new CreateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortDefinition",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Definition", DataType = "base64Binary")]
        public byte[] GetReportDefinition(string Report)
        {
            object[] results = Invoke("GetReportDefinition", new object[]
                                                                 {
                                                                     Report
                                                                 });
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportDefinition(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportDefinition", new object[]
                                                          {
                                                              report
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetReportDefinition(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void GetReportDefinitionAsync(string Report)
        {
            GetReportDefinitionAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportDefinitionAsync(string report, object userState)
        {
            if ((_getReportDefinitionOperationCompleted == null))
            {
                _getReportDefinitionOperationCompleted = new SendOrPostCallback(OnGetReportDefinitionOperationCompleted);
            }
            InvokeAsync("GetReportDefinition", new object[]
                                                   {
                                                       report
                                                   }, _getReportDefinitionOperationCompleted, userState);
        }

        void OnGetReportDefinitionOperationCompleted(object arg)
        {
            if ((GetReportDefinitionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportDefinitionCompleted(this,
                                             new GetReportDefinitionCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortDefinition",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Warnings")]
        public Warning[] SetReportDefinition(string report, [XmlElement(DataType = "base64Binary")] byte[] Definition)
        {
            object[] results = Invoke("SetReportDefinition", new object[]
                                                                 {
                                                                     report,
                                                                     Definition
                                                                 });
            return ((Warning[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportDefinition(string report, byte[] definition, AsyncCallback callback,
                                                     object asyncState)
        {
            return BeginInvoke("SetReportDefinition", new object[]
                                                          {
                                                              report,
                                                              definition
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public Warning[] EndSetReportDefinition(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Warning[]) (results[0]));
        }

        /// <remarks/>
        public void SetReportDefinitionAsync(string report, byte[] Definition)
        {
            SetReportDefinitionAsync(report, Definition, null);
        }

        /// <remarks/>
        public void SetReportDefinitionAsync(string report, byte[] definition, object userState)
        {
            if ((_setReportDefinitionOperationCompleted == null))
            {
                _setReportDefinitionOperationCompleted = new SendOrPostCallback(OnSetReportDefinitionOperationCompleted);
            }
            InvokeAsync("SetReportDefinition", new object[]
                                                   {
                                                       report,
                                                       definition
                                                   }, _setReportDefinitionOperationCompleted, userState);
        }

        void OnSetReportDefinitionOperationCompleted(object arg)
        {
            if ((SetReportDefinitionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportDefinitionCompleted(this,
                                             new SetReportDefinitionCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Resource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CreateResource(string Resource, string parent, bool overwrite,
                                   [XmlElement(DataType = "base64Binary")] byte[] Contents, string MimeType,
                                   Property[] properties)
        {
            Invoke("CreateResource", new object[]
                                         {
                                             Resource,
                                             parent,
                                             overwrite,
                                             Contents,
                                             MimeType,
                                             properties
                                         });
        }

        /// <remarks/>
        public IAsyncResult BeginCreateResource(string Resource, string parent, bool overwrite, byte[] Contents,
                                                string MimeType, Property[] properties, AsyncCallback callback,
                                                object asyncState)
        {
            return BeginInvoke("CreateResource", new object[]
                                                     {
                                                         Resource,
                                                         parent,
                                                         overwrite,
                                                         Contents,
                                                         MimeType,
                                                         properties
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateResource(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateResourceAsync(string Resource, string parent, bool overwrite, byte[] Contents, string MimeType,
                                        Property[] properties)
        {
            CreateResourceAsync(Resource, parent, overwrite, Contents, MimeType, properties, null);
        }

        /// <remarks/>
        public void CreateResourceAsync(string Resource, string parent, bool overwrite, byte[] Contents, string MimeType,
                                        Property[] properties, object userState)
        {
            if ((_createResourceOperationCompleted == null))
            {
                _createResourceOperationCompleted = new SendOrPostCallback(OnCreateResourceOperationCompleted);
            }
            InvokeAsync("CreateResource", new object[]
                                              {
                                                  Resource,
                                                  parent,
                                                  overwrite,
                                                  Contents,
                                                  MimeType,
                                                  properties
                                              }, _createResourceOperationCompleted, userState);
        }

        void OnCreateResourceOperationCompleted(object arg)
        {
            if ((CreateResourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateResourceCompleted(this,
                                        new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRes" +
                            "ourceContents",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetResourceContents(string Resource, [XmlElement(DataType = "base64Binary")] byte[] Contents,
                                        string MimeType)
        {
            Invoke("SetResourceContents", new object[]
                                              {
                                                  Resource,
                                                  Contents,
                                                  MimeType
                                              });
        }

        /// <remarks/>
        public IAsyncResult BeginSetResourceContents(string Resource, byte[] Contents, string MimeType,
                                                     AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetResourceContents", new object[]
                                                          {
                                                              Resource,
                                                              Contents,
                                                              MimeType
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetResourceContents(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetResourceContentsAsync(string Resource, byte[] Contents, string MimeType)
        {
            SetResourceContentsAsync(Resource, Contents, MimeType, null);
        }

        /// <remarks/>
        public void SetResourceContentsAsync(string Resource, byte[] Contents, string MimeType, object userState)
        {
            if ((_setResourceContentsOperationCompleted == null))
            {
                _setResourceContentsOperationCompleted = new SendOrPostCallback(OnSetResourceContentsOperationCompleted);
            }
            InvokeAsync("SetResourceContents", new object[]
                                                   {
                                                       Resource,
                                                       Contents,
                                                       MimeType
                                                   }, _setResourceContentsOperationCompleted, userState);
        }

        void OnSetResourceContentsOperationCompleted(object arg)
        {
            if ((SetResourceContentsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetResourceContentsCompleted(this,
                                             new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRes" +
                            "ourceContents",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Contents", DataType = "base64Binary")]
        public byte[] GetResourceContents(string Resource, out string MimeType)
        {
            object[] results = Invoke("GetResourceContents", new object[]
                                                                 {
                                                                     Resource
                                                                 });
            MimeType = ((string) (results[1]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetResourceContents(string Resource, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetResourceContents", new object[]
                                                          {
                                                              Resource
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetResourceContents(IAsyncResult asyncResult, out string MimeType)
        {
            object[] results = EndInvoke(asyncResult);
            MimeType = ((string) (results[1]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void GetResourceContentsAsync(string Resource)
        {
            GetResourceContentsAsync(Resource, null);
        }

        /// <remarks/>
        public void GetResourceContentsAsync(string Resource, object userState)
        {
            if ((_getResourceContentsOperationCompleted == null))
            {
                _getResourceContentsOperationCompleted = new SendOrPostCallback(OnGetResourceContentsOperationCompleted);
            }
            InvokeAsync("GetResourceContents", new object[]
                                                   {
                                                       Resource
                                                   }, _getResourceContentsOperationCompleted, userState);
        }

        void OnGetResourceContentsOperationCompleted(object arg)
        {
            if ((GetResourceContentsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetResourceContentsCompleted(this,
                                             new GetResourceContentsCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortParameters",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Parameters")]
        public ReportParameter[] GetReportParameters(string report, string HistoryID, bool ForRendering,
                                                     ParameterValue[] Values, DataSourceCredentials[] Credentials)
        {
            object[] results = Invoke("GetReportParameters", new object[]
                                                                 {
                                                                     report,
                                                                     HistoryID,
                                                                     ForRendering,
                                                                     Values,
                                                                     Credentials
                                                                 });
            return ((ReportParameter[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportParameters(string report, string HistoryID, bool ForRendering,
                                                     ParameterValue[] Values, DataSourceCredentials[] Credentials,
                                                     AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportParameters", new object[]
                                                          {
                                                              report,
                                                              HistoryID,
                                                              ForRendering,
                                                              Values,
                                                              Credentials
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public ReportParameter[] EndGetReportParameters(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((ReportParameter[]) (results[0]));
        }

        /// <remarks/>
        public void GetReportParametersAsync(string report, string HistoryID, bool ForRendering, ParameterValue[] Values,
                                             DataSourceCredentials[] Credentials)
        {
            GetReportParametersAsync(report, HistoryID, ForRendering, Values, Credentials, null);
        }

        /// <remarks/>
        public void GetReportParametersAsync(string report, string HistoryID, bool ForRendering, ParameterValue[] Values,
                                             DataSourceCredentials[] Credentials, object userState)
        {
            if ((_getReportParametersOperationCompleted == null))
            {
                _getReportParametersOperationCompleted = new SendOrPostCallback(OnGetReportParametersOperationCompleted);
            }
            InvokeAsync("GetReportParameters", new object[]
                                                   {
                                                       report,
                                                       HistoryID,
                                                       ForRendering,
                                                       Values,
                                                       Credentials
                                                   }, _getReportParametersOperationCompleted, userState);
        }

        void OnGetReportParametersOperationCompleted(object arg)
        {
            if ((GetReportParametersCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportParametersCompleted(this,
                                             new GetReportParametersCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortParameters",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetReportParameters(string report, ReportParameter[] Parameters)
        {
            Invoke("SetReportParameters", new object[]
                                              {
                                                  report,
                                                  Parameters
                                              });
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportParameters(string report, ReportParameter[] Parameters, AsyncCallback callback,
                                                     object asyncState)
        {
            return BeginInvoke("SetReportParameters", new object[]
                                                          {
                                                              report,
                                                              Parameters
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetReportParameters(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetReportParametersAsync(string report, ReportParameter[] Parameters)
        {
            SetReportParametersAsync(report, Parameters, null);
        }

        /// <remarks/>
        public void SetReportParametersAsync(string report, ReportParameter[] Parameters, object userState)
        {
            if ((_setReportParametersOperationCompleted == null))
            {
                _setReportParametersOperationCompleted = new SendOrPostCallback(OnSetReportParametersOperationCompleted);
            }
            InvokeAsync("SetReportParameters", new object[]
                                                   {
                                                       report,
                                                       Parameters
                                                   }, _setReportParametersOperationCompleted, userState);
        }

        void OnSetReportParametersOperationCompleted(object arg)
        {
            if ((SetReportParametersCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportParametersCompleted(this,
                                             new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "LinkedReport",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CreateLinkedReport(string report, string parent, string Link, Property[] properties)
        {
            Invoke("CreateLinkedReport", new object[]
                                             {
                                                 report,
                                                 parent,
                                                 Link,
                                                 properties
                                             });
        }

        /// <remarks/>
        public IAsyncResult BeginCreateLinkedReport(string report, string parent, string Link, Property[] properties,
                                                    AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateLinkedReport", new object[]
                                                         {
                                                             report,
                                                             parent,
                                                             Link,
                                                             properties
                                                         }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateLinkedReport(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateLinkedReportAsync(string report, string parent, string Link, Property[] properties)
        {
            CreateLinkedReportAsync(report, parent, Link, properties, null);
        }

        /// <remarks/>
        public void CreateLinkedReportAsync(string report, string parent, string Link, Property[] properties,
                                            object userState)
        {
            if ((_createLinkedReportOperationCompleted == null))
            {
                _createLinkedReportOperationCompleted = new SendOrPostCallback(OnCreateLinkedReportOperationCompleted);
            }
            InvokeAsync("CreateLinkedReport", new object[]
                                                  {
                                                      report,
                                                      parent,
                                                      Link,
                                                      properties
                                                  }, _createLinkedReportOperationCompleted, userState);
        }

        void OnCreateLinkedReportOperationCompleted(object arg)
        {
            if ((CreateLinkedReportCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateLinkedReportCompleted(this,
                                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortLink",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Link")]
        public string GetReportLink(string Report)
        {
            object[] results = Invoke("GetReportLink", new object[]
                                                           {
                                                               Report
                                                           });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportLink(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportLink", new object[]
                                                    {
                                                        report
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetReportLink(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetReportLinkAsync(string Report)
        {
            GetReportLinkAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportLinkAsync(string report, object userState)
        {
            if ((_getReportLinkOperationCompleted == null))
            {
                _getReportLinkOperationCompleted = new SendOrPostCallback(OnGetReportLinkOperationCompleted);
            }
            InvokeAsync("GetReportLink", new object[]
                                             {
                                                 report
                                             }, _getReportLinkOperationCompleted, userState);
        }

        void OnGetReportLinkOperationCompleted(object arg)
        {
            if ((GetReportLinkCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportLinkCompleted(this,
                                       new GetReportLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortLink",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetReportLink(string report, string Link)
        {
            Invoke("SetReportLink", new object[]
                                        {
                                            report,
                                            Link
                                        });
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportLink(string report, string Link, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetReportLink", new object[]
                                                    {
                                                        report,
                                                        Link
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetReportLink(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetReportLinkAsync(string report, string Link)
        {
            SetReportLinkAsync(report, Link, null);
        }

        /// <remarks/>
        public void SetReportLinkAsync(string report, string Link, object userState)
        {
            if ((_setReportLinkOperationCompleted == null))
            {
                _setReportLinkOperationCompleted = new SendOrPostCallback(OnSetReportLinkOperationCompleted);
            }
            InvokeAsync("SetReportLink", new object[]
                                             {
                                                 report,
                                                 Link
                                             }, _setReportLinkOperationCompleted, userState);
        }

        void OnSetReportLinkOperationCompleted(object arg)
        {
            if ((SetReportLinkCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportLinkCompleted(this,
                                       new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListLi" +
                            "nkedReports",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Reports")]
        public CatalogItem[] ListLinkedReports(string Report)
        {
            object[] results = Invoke("ListLinkedReports", new object[]
                                                               {
                                                                   Report
                                                               });
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListLinkedReports(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListLinkedReports", new object[]
                                                        {
                                                            report
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public CatalogItem[] EndListLinkedReports(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public void ListLinkedReportsAsync(string Report)
        {
            ListLinkedReportsAsync(Report, null);
        }

        /// <remarks/>
        public void ListLinkedReportsAsync(string report, object userState)
        {
            if ((_listLinkedReportsOperationCompleted == null))
            {
                _listLinkedReportsOperationCompleted = new SendOrPostCallback(OnListLinkedReportsOperationCompleted);
            }
            InvokeAsync("ListLinkedReports", new object[]
                                                 {
                                                     report
                                                 }, _listLinkedReportsOperationCompleted, userState);
        }

        void OnListLinkedReportsOperationCompleted(object arg)
        {
            if ((ListLinkedReportsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListLinkedReportsCompleted(this,
                                           new ListLinkedReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("SessionHeaderValue", Direction = SoapHeaderDirection.InOut)]
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
                            "",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Result", DataType = "base64Binary")]
        public byte[] Render(string report, string Format, string HistoryID, string DeviceInfo,
                             ParameterValue[] Parameters, DataSourceCredentials[] Credentials, string ShowHideToggle,
                             out string Encoding, out string MimeType, out ParameterValue[] ParametersUsed,
                             out Warning[] Warnings, out string[] StreamIds)
        {
            object[] results = Invoke("Render", new object[]
                                                    {
                                                        report,
                                                        Format,
                                                        HistoryID,
                                                        DeviceInfo,
                                                        Parameters,
                                                        Credentials,
                                                        ShowHideToggle
                                                    });
            Encoding = ((string) (results[1]));
            MimeType = ((string) (results[2]));
            ParametersUsed = ((ParameterValue[]) (results[3]));
            Warnings = ((Warning[]) (results[4]));
            StreamIds = ((string[]) (results[5]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginRender(string report, string Format, string HistoryID, string DeviceInfo,
                                        ParameterValue[] Parameters, DataSourceCredentials[] Credentials,
                                        string ShowHideToggle, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("Render", new object[]
                                             {
                                                 report,
                                                 Format,
                                                 HistoryID,
                                                 DeviceInfo,
                                                 Parameters,
                                                 Credentials,
                                                 ShowHideToggle
                                             }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndRender(IAsyncResult asyncResult, out string Encoding, out string MimeType,
                                out ParameterValue[] ParametersUsed, out Warning[] Warnings, out string[] StreamIds)
        {
            object[] results = EndInvoke(asyncResult);
            Encoding = ((string) (results[1]));
            MimeType = ((string) (results[2]));
            ParametersUsed = ((ParameterValue[]) (results[3]));
            Warnings = ((Warning[]) (results[4]));
            StreamIds = ((string[]) (results[5]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void RenderAsync(string report, string Format, string HistoryID, string DeviceInfo,
                                ParameterValue[] Parameters, DataSourceCredentials[] Credentials, string ShowHideToggle)
        {
            RenderAsync(report, Format, HistoryID, DeviceInfo, Parameters, Credentials, ShowHideToggle, null);
        }

        /// <remarks/>
        public void RenderAsync(string report, string Format, string HistoryID, string DeviceInfo,
                                ParameterValue[] Parameters, DataSourceCredentials[] Credentials, string ShowHideToggle,
                                object userState)
        {
            if ((_renderOperationCompleted == null))
            {
                _renderOperationCompleted = new SendOrPostCallback(OnRenderOperationCompleted);
            }
            InvokeAsync("Render", new object[]
                                      {
                                          report,
                                          Format,
                                          HistoryID,
                                          DeviceInfo,
                                          Parameters,
                                          Credentials,
                                          ShowHideToggle
                                      }, _renderOperationCompleted, userState);
        }

        void OnRenderOperationCompleted(object arg)
        {
            if ((RenderCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                RenderCompleted(this,
                                new RenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                             invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("SessionHeaderValue", Direction = SoapHeaderDirection.InOut)]
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Render" +
                            "Stream",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Result", DataType = "base64Binary")]
        public byte[] RenderStream(string report, string Format, string StreamID, string HistoryID, string DeviceInfo,
                                   ParameterValue[] Parameters, out string Encoding, out string MimeType)
        {
            object[] results = Invoke("RenderStream", new object[]
                                                          {
                                                              report,
                                                              Format,
                                                              StreamID,
                                                              HistoryID,
                                                              DeviceInfo,
                                                              Parameters
                                                          });
            Encoding = ((string) (results[1]));
            MimeType = ((string) (results[2]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginRenderStream(string report, string Format, string StreamID, string HistoryID,
                                              string DeviceInfo, ParameterValue[] Parameters, AsyncCallback callback,
                                              object asyncState)
        {
            return BeginInvoke("RenderStream", new object[]
                                                   {
                                                       report,
                                                       Format,
                                                       StreamID,
                                                       HistoryID,
                                                       DeviceInfo,
                                                       Parameters
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndRenderStream(IAsyncResult asyncResult, out string Encoding, out string MimeType)
        {
            object[] results = EndInvoke(asyncResult);
            Encoding = ((string) (results[1]));
            MimeType = ((string) (results[2]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void RenderStreamAsync(string report, string Format, string StreamID, string HistoryID, string DeviceInfo,
                                      ParameterValue[] Parameters)
        {
            RenderStreamAsync(report, Format, StreamID, HistoryID, DeviceInfo, Parameters, null);
        }

        /// <remarks/>
        public void RenderStreamAsync(string report, string Format, string StreamID, string HistoryID, string DeviceInfo,
                                      ParameterValue[] Parameters, object userState)
        {
            if ((_renderStreamOperationCompleted == null))
            {
                _renderStreamOperationCompleted = new SendOrPostCallback(OnRenderStreamOperationCompleted);
            }
            InvokeAsync("RenderStream", new object[]
                                            {
                                                report,
                                                Format,
                                                StreamID,
                                                HistoryID,
                                                DeviceInfo,
                                                Parameters
                                            }, _renderStreamOperationCompleted, userState);
        }

        void OnRenderStreamOperationCompleted(object arg)
        {
            if ((RenderStreamCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                RenderStreamCompleted(this,
                                      new RenderStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRen" +
                            "derResource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Result", DataType = "base64Binary")]
        public byte[] GetRenderResource(string Format, string DeviceInfo, out string MimeType)
        {
            object[] results = Invoke("GetRenderResource", new object[]
                                                               {
                                                                   Format,
                                                                   DeviceInfo
                                                               });
            MimeType = ((string) (results[1]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetRenderResource(string Format, string DeviceInfo, AsyncCallback callback,
                                                   object asyncState)
        {
            return BeginInvoke("GetRenderResource", new object[]
                                                        {
                                                            Format,
                                                            DeviceInfo
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetRenderResource(IAsyncResult asyncResult, out string MimeType)
        {
            object[] results = EndInvoke(asyncResult);
            MimeType = ((string) (results[1]));
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void GetRenderResourceAsync(string Format, string DeviceInfo)
        {
            GetRenderResourceAsync(Format, DeviceInfo, null);
        }

        /// <remarks/>
        public void GetRenderResourceAsync(string Format, string DeviceInfo, object userState)
        {
            if ((_getRenderResourceOperationCompleted == null))
            {
                _getRenderResourceOperationCompleted = new SendOrPostCallback(OnGetRenderResourceOperationCompleted);
            }
            InvokeAsync("GetRenderResource", new object[]
                                                 {
                                                     Format,
                                                     DeviceInfo
                                                 }, _getRenderResourceOperationCompleted, userState);
        }

        void OnGetRenderResourceOperationCompleted(object arg)
        {
            if ((GetRenderResourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetRenderResourceCompleted(this,
                                           new GetRenderResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetExe" +
                            "cutionOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetExecutionOptions(string report, ExecutionSettingEnum ExecutionSetting,
                                        [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] ScheduleDefinitionOrReference Item)
        {
            Invoke("SetExecutionOptions", new object[]
                                              {
                                                  report,
                                                  ExecutionSetting,
                                                  Item
                                              });
        }

        /// <remarks/>
        public IAsyncResult BeginSetExecutionOptions(string report, ExecutionSettingEnum ExecutionSetting,
                                                     ScheduleDefinitionOrReference Item, AsyncCallback callback,
                                                     object asyncState)
        {
            return BeginInvoke("SetExecutionOptions", new object[]
                                                          {
                                                              report,
                                                              ExecutionSetting,
                                                              Item
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetExecutionOptions(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetExecutionOptionsAsync(string report, ExecutionSettingEnum ExecutionSetting,
                                             ScheduleDefinitionOrReference Item)
        {
            SetExecutionOptionsAsync(report, ExecutionSetting, Item, null);
        }

        /// <remarks/>
        public void SetExecutionOptionsAsync(string report, ExecutionSettingEnum ExecutionSetting,
                                             ScheduleDefinitionOrReference Item, object userState)
        {
            if ((_setExecutionOptionsOperationCompleted == null))
            {
                _setExecutionOptionsOperationCompleted = new SendOrPostCallback(OnSetExecutionOptionsOperationCompleted);
            }
            InvokeAsync("SetExecutionOptions", new object[]
                                                   {
                                                       report,
                                                       ExecutionSetting,
                                                       Item
                                                   }, _setExecutionOptionsOperationCompleted, userState);
        }

        void OnSetExecutionOptionsOperationCompleted(object arg)
        {
            if ((SetExecutionOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetExecutionOptionsCompleted(this,
                                             new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExe" +
                            "cutionOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("ExecutionSetting")]
        public ExecutionSettingEnum GetExecutionOptions(string report,
                                                        [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] out ScheduleDefinitionOrReference Item)
        {
            object[] results = Invoke("GetExecutionOptions", new object[]
                                                                 {
                                                                     report
                                                                 });
            Item = ((ScheduleDefinitionOrReference) (results[1]));
            return ((ExecutionSettingEnum) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetExecutionOptions(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetExecutionOptions", new object[]
                                                          {
                                                              report
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public ExecutionSettingEnum EndGetExecutionOptions(IAsyncResult asyncResult,
                                                           out ScheduleDefinitionOrReference Item)
        {
            object[] results = EndInvoke(asyncResult);
            Item = ((ScheduleDefinitionOrReference) (results[1]));
            return ((ExecutionSettingEnum) (results[0]));
        }

        /// <remarks/>
        public void GetExecutionOptionsAsync(string Report)
        {
            GetExecutionOptionsAsync(Report, null);
        }

        /// <remarks/>
        public void GetExecutionOptionsAsync(string report, object userState)
        {
            if ((_getExecutionOptionsOperationCompleted == null))
            {
                _getExecutionOptionsOperationCompleted = new SendOrPostCallback(OnGetExecutionOptionsOperationCompleted);
            }
            InvokeAsync("GetExecutionOptions", new object[]
                                                   {
                                                       report
                                                   }, _getExecutionOptionsOperationCompleted, userState);
        }

        void OnGetExecutionOptionsOperationCompleted(object arg)
        {
            if ((GetExecutionOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetExecutionOptionsCompleted(this,
                                             new GetExecutionOptionsCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetCac" +
                            "heOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetCacheOptions(string report, bool CacheReport,
                                    [XmlElement("ScheduleExpiration", typeof (ScheduleExpiration))] [XmlElement("TimeExpiration", typeof (TimeExpiration))] ExpirationDefinition Item)
        {
            Invoke("SetCacheOptions", new object[]
                                          {
                                              report,
                                              CacheReport,
                                              Item
                                          });
        }

        /// <remarks/>
        public IAsyncResult BeginSetCacheOptions(string report, bool CacheReport, ExpirationDefinition Item,
                                                 AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetCacheOptions", new object[]
                                                      {
                                                          report,
                                                          CacheReport,
                                                          Item
                                                      }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetCacheOptions(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetCacheOptionsAsync(string report, bool CacheReport, ExpirationDefinition Item)
        {
            SetCacheOptionsAsync(report, CacheReport, Item, null);
        }

        /// <remarks/>
        public void SetCacheOptionsAsync(string report, bool CacheReport, ExpirationDefinition Item, object userState)
        {
            if ((_setCacheOptionsOperationCompleted == null))
            {
                _setCacheOptionsOperationCompleted = new SendOrPostCallback(OnSetCacheOptionsOperationCompleted);
            }
            InvokeAsync("SetCacheOptions", new object[]
                                               {
                                                   report,
                                                   CacheReport,
                                                   Item
                                               }, _setCacheOptionsOperationCompleted, userState);
        }

        void OnSetCacheOptionsOperationCompleted(object arg)
        {
            if ((SetCacheOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetCacheOptionsCompleted(this,
                                         new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetCac" +
                            "heOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("CacheReport")]
        public bool GetCacheOptions(string report,
                                    [XmlElement("ScheduleExpiration", typeof (ScheduleExpiration))] [XmlElement("TimeExpiration", typeof (TimeExpiration))] out ExpirationDefinition
                                        Item)
        {
            object[] results = Invoke("GetCacheOptions", new object[]
                                                             {
                                                                 report
                                                             });
            Item = ((ExpirationDefinition) (results[1]));
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetCacheOptions(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetCacheOptions", new object[]
                                                      {
                                                          report
                                                      }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndGetCacheOptions(IAsyncResult asyncResult, out ExpirationDefinition Item)
        {
            object[] results = EndInvoke(asyncResult);
            Item = ((ExpirationDefinition) (results[1]));
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public void GetCacheOptionsAsync(string Report)
        {
            GetCacheOptionsAsync(Report, null);
        }

        /// <remarks/>
        public void GetCacheOptionsAsync(string report, object userState)
        {
            if ((_getCacheOptionsOperationCompleted == null))
            {
                _getCacheOptionsOperationCompleted = new SendOrPostCallback(OnGetCacheOptionsOperationCompleted);
            }
            InvokeAsync("GetCacheOptions", new object[]
                                               {
                                                   report
                                               }, _getCacheOptionsOperationCompleted, userState);
        }

        void OnGetCacheOptionsOperationCompleted(object arg)
        {
            if ((GetCacheOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetCacheOptionsCompleted(this,
                                         new GetCacheOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Update" +
                            "ReportExecutionSnapshot",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void UpdateReportExecutionSnapshot(string Report)
        {
            Invoke("UpdateReportExecutionSnapshot", new object[]
                                                        {
                                                            Report
                                                        });
        }

        /// <remarks/>
        public IAsyncResult BeginUpdateReportExecutionSnapshot(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("UpdateReportExecutionSnapshot", new object[]
                                                                    {
                                                                        report
                                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateReportExecutionSnapshot(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateReportExecutionSnapshotAsync(string Report)
        {
            UpdateReportExecutionSnapshotAsync(Report, null);
        }

        /// <remarks/>
        public void UpdateReportExecutionSnapshotAsync(string report, object userState)
        {
            if ((_updateReportExecutionSnapshotOperationCompleted == null))
            {
                _updateReportExecutionSnapshotOperationCompleted =
                    new SendOrPostCallback(OnUpdateReportExecutionSnapshotOperationCompleted);
            }
            InvokeAsync("UpdateReportExecutionSnapshot", new object[]
                                                             {
                                                                 report
                                                             }, _updateReportExecutionSnapshotOperationCompleted,
                        userState);
        }

        void OnUpdateReportExecutionSnapshotOperationCompleted(object arg)
        {
            if ((UpdateReportExecutionSnapshotCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdateReportExecutionSnapshotCompleted(this,
                                                       new AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FlushC" +
                            "ache",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void FlushCache(string Report)
        {
            Invoke("FlushCache", new object[]
                                     {
                                         Report
                                     });
        }

        /// <remarks/>
        public IAsyncResult BeginFlushCache(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("FlushCache", new object[]
                                                 {
                                                     report
                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public void EndFlushCache(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void FlushCacheAsync(string Report)
        {
            FlushCacheAsync(Report, null);
        }

        /// <remarks/>
        public void FlushCacheAsync(string report, object userState)
        {
            if ((_flushCacheOperationCompleted == null))
            {
                _flushCacheOperationCompleted = new SendOrPostCallback(OnFlushCacheOperationCompleted);
            }
            InvokeAsync("FlushCache", new object[]
                                          {
                                              report
                                          }, _flushCacheOperationCompleted, userState);
        }

        void OnFlushCacheOperationCompleted(object arg)
        {
            if ((FlushCacheCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                FlushCacheCompleted(this,
                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListJo" +
                            "bs",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Jobs")]
        public Job[] ListJobs()
        {
            object[] results = Invoke("ListJobs", new object[0]);
            return ((Job[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListJobs(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListJobs", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Job[] EndListJobs(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Job[]) (results[0]));
        }

        /// <remarks/>
        public void ListJobsAsync()
        {
            ListJobsAsync(null);
        }

        /// <remarks/>
        public void ListJobsAsync(object userState)
        {
            if ((_listJobsOperationCompleted == null))
            {
                _listJobsOperationCompleted = new SendOrPostCallback(OnListJobsOperationCompleted);
            }
            InvokeAsync("ListJobs", new object[0], _listJobsOperationCompleted, userState);
        }

        void OnListJobsOperationCompleted(object arg)
        {
            if ((ListJobsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListJobsCompleted(this,
                                  new ListJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                 invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
                            "Job",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public bool CancelJob(string JobID)
        {
            object[] results = Invoke("CancelJob", new object[]
                                                       {
                                                           JobID
                                                       });
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCancelJob(string JobID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CancelJob", new object[]
                                                {
                                                    JobID
                                                }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCancelJob(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public void CancelJobAsync(string JobID)
        {
            CancelJobAsync(JobID, null);
        }

        /// <remarks/>
        public void CancelJobAsync(string JobID, object userState)
        {
            if ((_cancelJobOperationCompleted == null))
            {
                _cancelJobOperationCompleted = new SendOrPostCallback(OnCancelJobOperationCompleted);
            }
            InvokeAsync("CancelJob", new object[]
                                         {
                                             JobID
                                         }, _cancelJobOperationCompleted, userState);
        }

        void OnCancelJobOperationCompleted(object arg)
        {
            if ((CancelJobCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CancelJobCompleted(this,
                                   new CancelJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "DataSource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CreateDataSource(string DataSource, string parent, bool overwrite, DataSourceDefinition Definition,
                                     Property[] properties)
        {
            Invoke("CreateDataSource", new object[]
                                           {
                                               DataSource,
                                               parent,
                                               overwrite,
                                               Definition,
                                               properties
                                           });
        }

        /// <remarks/>
        public IAsyncResult BeginCreateDataSource(string DataSource, string parent, bool overwrite,
                                                  DataSourceDefinition Definition, Property[] properties,
                                                  AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateDataSource", new object[]
                                                       {
                                                           DataSource,
                                                           parent,
                                                           overwrite,
                                                           Definition,
                                                           properties
                                                       }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateDataSource(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateDataSourceAsync(string DataSource, string parent, bool overwrite,
                                          DataSourceDefinition Definition, Property[] properties)
        {
            CreateDataSourceAsync(DataSource, parent, overwrite, Definition, properties, null);
        }

        /// <remarks/>
        public void CreateDataSourceAsync(string DataSource, string parent, bool overwrite,
                                          DataSourceDefinition Definition, Property[] properties, object userState)
        {
            if ((_createDataSourceOperationCompleted == null))
            {
                _createDataSourceOperationCompleted = new SendOrPostCallback(OnCreateDataSourceOperationCompleted);
            }
            InvokeAsync("CreateDataSource", new object[]
                                                {
                                                    DataSource,
                                                    parent,
                                                    overwrite,
                                                    Definition,
                                                    properties
                                                }, _createDataSourceOperationCompleted, userState);
        }

        void OnCreateDataSourceOperationCompleted(object arg)
        {
            if ((CreateDataSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateDataSourceCompleted(this,
                                          new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                      invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
                            "aSourceContents",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Definition")]
        public DataSourceDefinition GetDataSourceContents(string DataSource)
        {
            object[] results = Invoke("GetDataSourceContents", new object[]
                                                                   {
                                                                       DataSource
                                                                   });
            return ((DataSourceDefinition) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetDataSourceContents(string DataSource, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetDataSourceContents", new object[]
                                                            {
                                                                DataSource
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public DataSourceDefinition EndGetDataSourceContents(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((DataSourceDefinition) (results[0]));
        }

        /// <remarks/>
        public void GetDataSourceContentsAsync(string DataSource)
        {
            GetDataSourceContentsAsync(DataSource, null);
        }

        /// <remarks/>
        public void GetDataSourceContentsAsync(string DataSource, object userState)
        {
            if ((_getDataSourceContentsOperationCompleted == null))
            {
                _getDataSourceContentsOperationCompleted =
                    new SendOrPostCallback(OnGetDataSourceContentsOperationCompleted);
            }
            InvokeAsync("GetDataSourceContents", new object[]
                                                     {
                                                         DataSource
                                                     }, _getDataSourceContentsOperationCompleted, userState);
        }

        void OnGetDataSourceContentsOperationCompleted(object arg)
        {
            if ((GetDataSourceContentsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetDataSourceContentsCompleted(this,
                                               new GetDataSourceContentsCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
                            "aSourceContents",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetDataSourceContents(string DataSource, DataSourceDefinition Definition)
        {
            Invoke("SetDataSourceContents", new object[]
                                                {
                                                    DataSource,
                                                    Definition
                                                });
        }

        /// <remarks/>
        public IAsyncResult BeginSetDataSourceContents(string DataSource, DataSourceDefinition Definition,
                                                       AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetDataSourceContents", new object[]
                                                            {
                                                                DataSource,
                                                                Definition
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetDataSourceContents(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetDataSourceContentsAsync(string DataSource, DataSourceDefinition Definition)
        {
            SetDataSourceContentsAsync(DataSource, Definition, null);
        }

        /// <remarks/>
        public void SetDataSourceContentsAsync(string DataSource, DataSourceDefinition Definition, object userState)
        {
            if ((_setDataSourceContentsOperationCompleted == null))
            {
                _setDataSourceContentsOperationCompleted =
                    new SendOrPostCallback(OnSetDataSourceContentsOperationCompleted);
            }
            InvokeAsync("SetDataSourceContents", new object[]
                                                     {
                                                         DataSource,
                                                         Definition
                                                     }, _setDataSourceContentsOperationCompleted, userState);
        }

        void OnSetDataSourceContentsOperationCompleted(object arg)
        {
            if ((SetDataSourceContentsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetDataSourceContentsCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Enable" +
                            "DataSource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void EnableDataSource(string DataSource)
        {
            Invoke("EnableDataSource", new object[]
                                           {
                                               DataSource
                                           });
        }

        /// <remarks/>
        public IAsyncResult BeginEnableDataSource(string DataSource, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("EnableDataSource", new object[]
                                                       {
                                                           DataSource
                                                       }, callback, asyncState);
        }

        /// <remarks/>
        public void EndEnableDataSource(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void EnableDataSourceAsync(string DataSource)
        {
            EnableDataSourceAsync(DataSource, null);
        }

        /// <remarks/>
        public void EnableDataSourceAsync(string DataSource, object userState)
        {
            if ((_enableDataSourceOperationCompleted == null))
            {
                _enableDataSourceOperationCompleted = new SendOrPostCallback(OnEnableDataSourceOperationCompleted);
            }
            InvokeAsync("EnableDataSource", new object[]
                                                {
                                                    DataSource
                                                }, _enableDataSourceOperationCompleted, userState);
        }

        void OnEnableDataSourceOperationCompleted(object arg)
        {
            if ((EnableDataSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                EnableDataSourceCompleted(this,
                                          new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                      invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Disabl" +
                            "eDataSource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DisableDataSource(string DataSource)
        {
            Invoke("DisableDataSource", new object[]
                                            {
                                                DataSource
                                            });
        }

        /// <remarks/>
        public IAsyncResult BeginDisableDataSource(string DataSource, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("DisableDataSource", new object[]
                                                        {
                                                            DataSource
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDisableDataSource(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DisableDataSourceAsync(string DataSource)
        {
            DisableDataSourceAsync(DataSource, null);
        }

        /// <remarks/>
        public void DisableDataSourceAsync(string DataSource, object userState)
        {
            if ((_disableDataSourceOperationCompleted == null))
            {
                _disableDataSourceOperationCompleted = new SendOrPostCallback(OnDisableDataSourceOperationCompleted);
            }
            InvokeAsync("DisableDataSource", new object[]
                                                 {
                                                     DataSource
                                                 }, _disableDataSourceOperationCompleted, userState);
        }

        void OnDisableDataSourceOperationCompleted(object arg)
        {
            if ((DisableDataSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DisableDataSourceCompleted(this,
                                           new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
                            "portsUsingDataSource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Reports")]
        public CatalogItem[] ListReportsUsingDataSource(string DataSource)
        {
            object[] results = Invoke("ListReportsUsingDataSource", new object[]
                                                                        {
                                                                            DataSource
                                                                        });
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListReportsUsingDataSource(string DataSource, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListReportsUsingDataSource", new object[]
                                                                 {
                                                                     DataSource
                                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public CatalogItem[] EndListReportsUsingDataSource(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public void ListReportsUsingDataSourceAsync(string DataSource)
        {
            ListReportsUsingDataSourceAsync(DataSource, null);
        }

        /// <remarks/>
        public void ListReportsUsingDataSourceAsync(string DataSource, object userState)
        {
            if ((_listReportsUsingDataSourceOperationCompleted == null))
            {
                _listReportsUsingDataSourceOperationCompleted =
                    new SendOrPostCallback(OnListReportsUsingDataSourceOperationCompleted);
            }
            InvokeAsync("ListReportsUsingDataSource", new object[]
                                                          {
                                                              DataSource
                                                          }, _listReportsUsingDataSourceOperationCompleted, userState);
        }

        void OnListReportsUsingDataSourceOperationCompleted(object arg)
        {
            if ((ListReportsUsingDataSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListReportsUsingDataSourceCompleted(this,
                                                    new ListReportsUsingDataSourceCompletedEventArgs(
                                                        invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortDataSources",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetReportDataSources(string report, DataSource[] DataSources)
        {
            Invoke("SetReportDataSources", new object[]
                                               {
                                                   report,
                                                   DataSources
                                               });
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportDataSources(string report, DataSource[] DataSources, AsyncCallback callback,
                                                      object asyncState)
        {
            return BeginInvoke("SetReportDataSources", new object[]
                                                           {
                                                               report,
                                                               DataSources
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetReportDataSources(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetReportDataSourcesAsync(string report, DataSource[] DataSources)
        {
            SetReportDataSourcesAsync(report, DataSources, null);
        }

        /// <remarks/>
        public void SetReportDataSourcesAsync(string report, DataSource[] DataSources, object userState)
        {
            if ((_setReportDataSourcesOperationCompleted == null))
            {
                _setReportDataSourcesOperationCompleted = new SendOrPostCallback(OnSetReportDataSourcesOperationCompleted);
            }
            InvokeAsync("SetReportDataSources", new object[]
                                                    {
                                                        report,
                                                        DataSources
                                                    }, _setReportDataSourcesOperationCompleted, userState);
        }

        void OnSetReportDataSourcesOperationCompleted(object arg)
        {
            if ((SetReportDataSourcesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportDataSourcesCompleted(this,
                                              new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                          invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortDataSources",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("DataSources")]
        public DataSource[] GetReportDataSources(string Report)
        {
            object[] results = Invoke("GetReportDataSources", new object[]
                                                                  {
                                                                      Report
                                                                  });
            return ((DataSource[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportDataSources(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportDataSources", new object[]
                                                           {
                                                               report
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public DataSource[] EndGetReportDataSources(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((DataSource[]) (results[0]));
        }

        /// <remarks/>
        public void GetReportDataSourcesAsync(string Report)
        {
            GetReportDataSourcesAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportDataSourcesAsync(string report, object userState)
        {
            if ((_getReportDataSourcesOperationCompleted == null))
            {
                _getReportDataSourcesOperationCompleted = new SendOrPostCallback(OnGetReportDataSourcesOperationCompleted);
            }
            InvokeAsync("GetReportDataSources", new object[]
                                                    {
                                                        report
                                                    }, _getReportDataSourcesOperationCompleted, userState);
        }

        void OnGetReportDataSourcesOperationCompleted(object arg)
        {
            if ((GetReportDataSourcesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportDataSourcesCompleted(this,
                                              new GetReportDataSourcesCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortDataSourcePrompts",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("DataSourcePrompts")]
        public DataSourcePrompt[] GetReportDataSourcePrompts(string Report)
        {
            object[] results = Invoke("GetReportDataSourcePrompts", new object[]
                                                                        {
                                                                            Report
                                                                        });
            return ((DataSourcePrompt[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportDataSourcePrompts(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportDataSourcePrompts", new object[]
                                                                 {
                                                                     report
                                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public DataSourcePrompt[] EndGetReportDataSourcePrompts(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((DataSourcePrompt[]) (results[0]));
        }

        /// <remarks/>
        public void GetReportDataSourcePromptsAsync(string Report)
        {
            GetReportDataSourcePromptsAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportDataSourcePromptsAsync(string report, object userState)
        {
            if ((_getReportDataSourcePromptsOperationCompleted == null))
            {
                _getReportDataSourcePromptsOperationCompleted =
                    new SendOrPostCallback(OnGetReportDataSourcePromptsOperationCompleted);
            }
            InvokeAsync("GetReportDataSourcePrompts", new object[]
                                                          {
                                                              report
                                                          }, _getReportDataSourcePromptsOperationCompleted, userState);
        }

        void OnGetReportDataSourcePromptsOperationCompleted(object arg)
        {
            if ((GetReportDataSourcePromptsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportDataSourcePromptsCompleted(this,
                                                    new GetReportDataSourcePromptsCompletedEventArgs(
                                                        invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "ReportHistorySnapshot",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("HistoryID")]
        public string CreateReportHistorySnapshot(string report, out Warning[] Warnings)
        {
            object[] results = Invoke("CreateReportHistorySnapshot", new object[]
                                                                         {
                                                                             report
                                                                         });
            Warnings = ((Warning[]) (results[1]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateReportHistorySnapshot(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateReportHistorySnapshot", new object[]
                                                                  {
                                                                      report
                                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateReportHistorySnapshot(IAsyncResult asyncResult, out Warning[] Warnings)
        {
            object[] results = EndInvoke(asyncResult);
            Warnings = ((Warning[]) (results[1]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CreateReportHistorySnapshotAsync(string Report)
        {
            CreateReportHistorySnapshotAsync(Report, null);
        }

        /// <remarks/>
        public void CreateReportHistorySnapshotAsync(string report, object userState)
        {
            if ((_createReportHistorySnapshotOperationCompleted == null))
            {
                _createReportHistorySnapshotOperationCompleted =
                    new SendOrPostCallback(OnCreateReportHistorySnapshotOperationCompleted);
            }
            InvokeAsync("CreateReportHistorySnapshot", new object[]
                                                           {
                                                               report
                                                           }, _createReportHistorySnapshotOperationCompleted, userState);
        }

        void OnCreateReportHistorySnapshotOperationCompleted(object arg)
        {
            if ((CreateReportHistorySnapshotCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateReportHistorySnapshotCompleted(this,
                                                     new CreateReportHistorySnapshotCompletedEventArgs(
                                                         invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortHistoryOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetReportHistoryOptions(string report, bool EnableManualSnapshotCreation,
                                            bool KeepExecutionSnapshots,
                                            [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] ScheduleDefinitionOrReference Item)
        {
            Invoke("SetReportHistoryOptions", new object[]
                                                  {
                                                      report,
                                                      EnableManualSnapshotCreation,
                                                      KeepExecutionSnapshots,
                                                      Item
                                                  });
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportHistoryOptions(string report, bool EnableManualSnapshotCreation,
                                                         bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item,
                                                         AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetReportHistoryOptions", new object[]
                                                              {
                                                                  report,
                                                                  EnableManualSnapshotCreation,
                                                                  KeepExecutionSnapshots,
                                                                  Item
                                                              }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetReportHistoryOptions(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetReportHistoryOptionsAsync(string report, bool EnableManualSnapshotCreation,
                                                 bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item)
        {
            SetReportHistoryOptionsAsync(report, EnableManualSnapshotCreation, KeepExecutionSnapshots, Item, null);
        }

        /// <remarks/>
        public void SetReportHistoryOptionsAsync(string report, bool EnableManualSnapshotCreation,
                                                 bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item,
                                                 object userState)
        {
            if ((_setReportHistoryOptionsOperationCompleted == null))
            {
                _setReportHistoryOptionsOperationCompleted =
                    new SendOrPostCallback(OnSetReportHistoryOptionsOperationCompleted);
            }
            InvokeAsync("SetReportHistoryOptions", new object[]
                                                       {
                                                           report,
                                                           EnableManualSnapshotCreation,
                                                           KeepExecutionSnapshots,
                                                           Item
                                                       }, _setReportHistoryOptionsOperationCompleted, userState);
        }

        void OnSetReportHistoryOptionsOperationCompleted(object arg)
        {
            if ((SetReportHistoryOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportHistoryOptionsCompleted(this,
                                                 new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                             invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortHistoryOptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("EnableManualSnapshotCreation")]
        public bool GetReportHistoryOptions(string report, out bool KeepExecutionSnapshots,
                                            [XmlElement("NoSchedule", typeof (NoSchedule))] [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))] [XmlElement("ScheduleReference", typeof (ScheduleReference))] out
                                                ScheduleDefinitionOrReference Item)
        {
            object[] results = Invoke("GetReportHistoryOptions", new object[]
                                                                     {
                                                                         report
                                                                     });
            KeepExecutionSnapshots = ((bool) (results[1]));
            Item = ((ScheduleDefinitionOrReference) (results[2]));
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportHistoryOptions(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportHistoryOptions", new object[]
                                                              {
                                                                  report
                                                              }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndGetReportHistoryOptions(IAsyncResult asyncResult, out bool KeepExecutionSnapshots,
                                               out ScheduleDefinitionOrReference Item)
        {
            object[] results = EndInvoke(asyncResult);
            KeepExecutionSnapshots = ((bool) (results[1]));
            Item = ((ScheduleDefinitionOrReference) (results[2]));
            return ((bool) (results[0]));
        }

        /// <remarks/>
        public void GetReportHistoryOptionsAsync(string Report)
        {
            GetReportHistoryOptionsAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportHistoryOptionsAsync(string report, object userState)
        {
            if ((_getReportHistoryOptionsOperationCompleted == null))
            {
                _getReportHistoryOptionsOperationCompleted =
                    new SendOrPostCallback(OnGetReportHistoryOptionsOperationCompleted);
            }
            InvokeAsync("GetReportHistoryOptions", new object[]
                                                       {
                                                           report
                                                       }, _getReportHistoryOptionsOperationCompleted, userState);
        }

        void OnGetReportHistoryOptionsOperationCompleted(object arg)
        {
            if ((GetReportHistoryOptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportHistoryOptionsCompleted(this,
                                                 new GetReportHistoryOptionsCompletedEventArgs(invokeArgs.Results,
                                                                                               invokeArgs.Error,
                                                                                               invokeArgs.Cancelled,
                                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
                            "ortHistoryLimit",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetReportHistoryLimit(string report, bool UseSystem, int HistoryLimit)
        {
            Invoke("SetReportHistoryLimit", new object[]
                                                {
                                                    report,
                                                    UseSystem,
                                                    HistoryLimit
                                                });
        }

        /// <remarks/>
        public IAsyncResult BeginSetReportHistoryLimit(string report, bool UseSystem, int HistoryLimit,
                                                       AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetReportHistoryLimit", new object[]
                                                            {
                                                                report,
                                                                UseSystem,
                                                                HistoryLimit
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetReportHistoryLimit(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetReportHistoryLimitAsync(string report, bool UseSystem, int HistoryLimit)
        {
            SetReportHistoryLimitAsync(report, UseSystem, HistoryLimit, null);
        }

        /// <remarks/>
        public void SetReportHistoryLimitAsync(string report, bool UseSystem, int HistoryLimit, object userState)
        {
            if ((_setReportHistoryLimitOperationCompleted == null))
            {
                _setReportHistoryLimitOperationCompleted =
                    new SendOrPostCallback(OnSetReportHistoryLimitOperationCompleted);
            }
            InvokeAsync("SetReportHistoryLimit", new object[]
                                                     {
                                                         report,
                                                         UseSystem,
                                                         HistoryLimit
                                                     }, _setReportHistoryLimitOperationCompleted, userState);
        }

        void OnSetReportHistoryLimitOperationCompleted(object arg)
        {
            if ((SetReportHistoryLimitCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetReportHistoryLimitCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
                            "ortHistoryLimit",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("HistoryLimit")]
        public int GetReportHistoryLimit(string report, out bool IsSystem, out int SystemLimit)
        {
            object[] results = Invoke("GetReportHistoryLimit", new object[]
                                                                   {
                                                                       report
                                                                   });
            IsSystem = ((bool) (results[1]));
            SystemLimit = ((int) (results[2]));
            return ((int) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetReportHistoryLimit(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetReportHistoryLimit", new object[]
                                                            {
                                                                report
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetReportHistoryLimit(IAsyncResult asyncResult, out bool IsSystem, out int SystemLimit)
        {
            object[] results = EndInvoke(asyncResult);
            IsSystem = ((bool) (results[1]));
            SystemLimit = ((int) (results[2]));
            return ((int) (results[0]));
        }

        /// <remarks/>
        public void GetReportHistoryLimitAsync(string Report)
        {
            GetReportHistoryLimitAsync(Report, null);
        }

        /// <remarks/>
        public void GetReportHistoryLimitAsync(string report, object userState)
        {
            if ((_getReportHistoryLimitOperationCompleted == null))
            {
                _getReportHistoryLimitOperationCompleted =
                    new SendOrPostCallback(OnGetReportHistoryLimitOperationCompleted);
            }
            InvokeAsync("GetReportHistoryLimit", new object[]
                                                     {
                                                         report
                                                     }, _getReportHistoryLimitOperationCompleted, userState);
        }

        void OnGetReportHistoryLimitOperationCompleted(object arg)
        {
            if ((GetReportHistoryLimitCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetReportHistoryLimitCompleted(this,
                                               new GetReportHistoryLimitCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
                            "portHistory",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("ReportHistory")]
        public ReportHistorySnapshot[] ListReportHistory(string Report)
        {
            object[] results = Invoke("ListReportHistory", new object[]
                                                               {
                                                                   Report
                                                               });
            return ((ReportHistorySnapshot[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListReportHistory(string report, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListReportHistory", new object[]
                                                        {
                                                            report
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public ReportHistorySnapshot[] EndListReportHistory(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((ReportHistorySnapshot[]) (results[0]));
        }

        /// <remarks/>
        public void ListReportHistoryAsync(string Report)
        {
            ListReportHistoryAsync(Report, null);
        }

        /// <remarks/>
        public void ListReportHistoryAsync(string report, object userState)
        {
            if ((_listReportHistoryOperationCompleted == null))
            {
                _listReportHistoryOperationCompleted = new SendOrPostCallback(OnListReportHistoryOperationCompleted);
            }
            InvokeAsync("ListReportHistory", new object[]
                                                 {
                                                     report
                                                 }, _listReportHistoryOperationCompleted, userState);
        }

        void OnListReportHistoryOperationCompleted(object arg)
        {
            if ((ListReportHistoryCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListReportHistoryCompleted(this,
                                           new ListReportHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                            "ReportHistorySnapshot",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteReportHistorySnapshot(string report, string HistoryID)
        {
            Invoke("DeleteReportHistorySnapshot", new object[]
                                                      {
                                                          report,
                                                          HistoryID
                                                      });
        }

        /// <remarks/>
        public IAsyncResult BeginDeleteReportHistorySnapshot(string report, string HistoryID, AsyncCallback callback,
                                                             object asyncState)
        {
            return BeginInvoke("DeleteReportHistorySnapshot", new object[]
                                                                  {
                                                                      report,
                                                                      HistoryID
                                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteReportHistorySnapshot(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync(string report, string HistoryID)
        {
            DeleteReportHistorySnapshotAsync(report, HistoryID, null);
        }

        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync(string report, string HistoryID, object userState)
        {
            if ((_deleteReportHistorySnapshotOperationCompleted == null))
            {
                _deleteReportHistorySnapshotOperationCompleted =
                    new SendOrPostCallback(OnDeleteReportHistorySnapshotOperationCompleted);
            }
            InvokeAsync("DeleteReportHistorySnapshot", new object[]
                                                           {
                                                               report,
                                                               HistoryID
                                                           }, _deleteReportHistorySnapshotOperationCompleted, userState);
        }

        void OnDeleteReportHistorySnapshotOperationCompleted(object arg)
        {
            if ((DeleteReportHistorySnapshotCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteReportHistorySnapshotCompleted(this,
                                                     new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FindIt" +
                            "ems",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Items")]
        public CatalogItem[] FindItems(string folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions)
        {
            object[] results = Invoke("FindItems", new object[]
                                                       {
                                                           folder,
                                                           BooleanOperator,
                                                           Conditions
                                                       });
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginFindItems(string folder, BooleanOperatorEnum BooleanOperator,
                                           SearchCondition[] Conditions, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("FindItems", new object[]
                                                {
                                                    folder,
                                                    BooleanOperator,
                                                    Conditions
                                                }, callback, asyncState);
        }

        /// <remarks/>
        public CatalogItem[] EndFindItems(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public void FindItemsAsync(string folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions)
        {
            FindItemsAsync(folder, BooleanOperator, Conditions, null);
        }

        /// <remarks/>
        public void FindItemsAsync(string folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions,
                                   object userState)
        {
            if ((_findItemsOperationCompleted == null))
            {
                _findItemsOperationCompleted = new SendOrPostCallback(OnFindItemsOperationCompleted);
            }
            InvokeAsync("FindItems", new object[]
                                         {
                                             folder,
                                             BooleanOperator,
                                             Conditions
                                         }, _findItemsOperationCompleted, userState);
        }

        void OnFindItemsOperationCompleted(object arg)
        {
            if ((FindItemsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                FindItemsCompleted(this,
                                   new FindItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Schedule",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("ScheduleID")]
        public string CreateSchedule(string Name, ScheduleDefinition ScheduleDefinition)
        {
            object[] results = Invoke("CreateSchedule", new object[]
                                                            {
                                                                Name,
                                                                ScheduleDefinition
                                                            });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateSchedule(string Name, ScheduleDefinition ScheduleDefinition,
                                                AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateSchedule", new object[]
                                                     {
                                                         Name,
                                                         ScheduleDefinition
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateSchedule(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CreateScheduleAsync(string Name, ScheduleDefinition ScheduleDefinition)
        {
            CreateScheduleAsync(Name, ScheduleDefinition, null);
        }

        /// <remarks/>
        public void CreateScheduleAsync(string Name, ScheduleDefinition ScheduleDefinition, object userState)
        {
            if ((_createScheduleOperationCompleted == null))
            {
                _createScheduleOperationCompleted = new SendOrPostCallback(OnCreateScheduleOperationCompleted);
            }
            InvokeAsync("CreateSchedule", new object[]
                                              {
                                                  Name,
                                                  ScheduleDefinition
                                              }, _createScheduleOperationCompleted, userState);
        }

        void OnCreateScheduleOperationCompleted(object arg)
        {
            if ((CreateScheduleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateScheduleCompleted(this,
                                        new CreateScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                            "Schedule",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteSchedule(string ScheduleID)
        {
            Invoke("DeleteSchedule", new object[]
                                         {
                                             ScheduleID
                                         });
        }

        /// <remarks/>
        public IAsyncResult BeginDeleteSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("DeleteSchedule", new object[]
                                                     {
                                                         ScheduleID
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteSchedule(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteScheduleAsync(string ScheduleID)
        {
            DeleteScheduleAsync(ScheduleID, null);
        }

        /// <remarks/>
        public void DeleteScheduleAsync(string ScheduleID, object userState)
        {
            if ((_deleteScheduleOperationCompleted == null))
            {
                _deleteScheduleOperationCompleted = new SendOrPostCallback(OnDeleteScheduleOperationCompleted);
            }
            InvokeAsync("DeleteSchedule", new object[]
                                              {
                                                  ScheduleID
                                              }, _deleteScheduleOperationCompleted, userState);
        }

        void OnDeleteScheduleOperationCompleted(object arg)
        {
            if ((DeleteScheduleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteScheduleCompleted(this,
                                        new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSch" +
                            "eduleProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition)
        {
            Invoke("SetScheduleProperties", new object[]
                                                {
                                                    Name,
                                                    ScheduleID,
                                                    ScheduleDefinition
                                                });
        }

        /// <remarks/>
        public IAsyncResult BeginSetScheduleProperties(string Name, string ScheduleID,
                                                       ScheduleDefinition ScheduleDefinition, AsyncCallback callback,
                                                       object asyncState)
        {
            return BeginInvoke("SetScheduleProperties", new object[]
                                                            {
                                                                Name,
                                                                ScheduleID,
                                                                ScheduleDefinition
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetScheduleProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetSchedulePropertiesAsync(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition)
        {
            SetSchedulePropertiesAsync(Name, ScheduleID, ScheduleDefinition, null);
        }

        /// <remarks/>
        public void SetSchedulePropertiesAsync(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition,
                                               object userState)
        {
            if ((_setSchedulePropertiesOperationCompleted == null))
            {
                _setSchedulePropertiesOperationCompleted =
                    new SendOrPostCallback(OnSetSchedulePropertiesOperationCompleted);
            }
            InvokeAsync("SetScheduleProperties", new object[]
                                                     {
                                                         Name,
                                                         ScheduleID,
                                                         ScheduleDefinition
                                                     }, _setSchedulePropertiesOperationCompleted, userState);
        }

        void OnSetSchedulePropertiesOperationCompleted(object arg)
        {
            if ((SetSchedulePropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetSchedulePropertiesCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSch" +
                            "eduleProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Schedule")]
        public Schedule GetScheduleProperties(string ScheduleID)
        {
            object[] results = Invoke("GetScheduleProperties", new object[]
                                                                   {
                                                                       ScheduleID
                                                                   });
            return ((Schedule) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetScheduleProperties(string ScheduleID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetScheduleProperties", new object[]
                                                            {
                                                                ScheduleID
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public Schedule EndGetScheduleProperties(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Schedule) (results[0]));
        }

        /// <remarks/>
        public void GetSchedulePropertiesAsync(string ScheduleID)
        {
            GetSchedulePropertiesAsync(ScheduleID, null);
        }

        /// <remarks/>
        public void GetSchedulePropertiesAsync(string ScheduleID, object userState)
        {
            if ((_getSchedulePropertiesOperationCompleted == null))
            {
                _getSchedulePropertiesOperationCompleted =
                    new SendOrPostCallback(OnGetSchedulePropertiesOperationCompleted);
            }
            InvokeAsync("GetScheduleProperties", new object[]
                                                     {
                                                         ScheduleID
                                                     }, _getSchedulePropertiesOperationCompleted, userState);
        }

        void OnGetSchedulePropertiesOperationCompleted(object arg)
        {
            if ((GetSchedulePropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetSchedulePropertiesCompleted(this,
                                               new GetSchedulePropertiesCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
                            "heduledReports",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Reports")]
        public CatalogItem[] ListScheduledReports(string ScheduleID)
        {
            object[] results = Invoke("ListScheduledReports", new object[]
                                                                  {
                                                                      ScheduleID
                                                                  });
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListScheduledReports(string ScheduleID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListScheduledReports", new object[]
                                                           {
                                                               ScheduleID
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public CatalogItem[] EndListScheduledReports(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((CatalogItem[]) (results[0]));
        }

        /// <remarks/>
        public void ListScheduledReportsAsync(string ScheduleID)
        {
            ListScheduledReportsAsync(ScheduleID, null);
        }

        /// <remarks/>
        public void ListScheduledReportsAsync(string ScheduleID, object userState)
        {
            if ((_listScheduledReportsOperationCompleted == null))
            {
                _listScheduledReportsOperationCompleted = new SendOrPostCallback(OnListScheduledReportsOperationCompleted);
            }
            InvokeAsync("ListScheduledReports", new object[]
                                                    {
                                                        ScheduleID
                                                    }, _listScheduledReportsOperationCompleted, userState);
        }

        void OnListScheduledReportsOperationCompleted(object arg)
        {
            if ((ListScheduledReportsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListScheduledReportsCompleted(this,
                                              new ListScheduledReportsCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
                            "hedules",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Schedules")]
        public Schedule[] ListSchedules()
        {
            object[] results = Invoke("ListSchedules", new object[0]);
            return ((Schedule[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSchedules(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListSchedules", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Schedule[] EndListSchedules(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Schedule[]) (results[0]));
        }

        /// <remarks/>
        public void ListSchedulesAsync()
        {
            ListSchedulesAsync(null);
        }

        /// <remarks/>
        public void ListSchedulesAsync(object userState)
        {
            if ((_listSchedulesOperationCompleted == null))
            {
                _listSchedulesOperationCompleted = new SendOrPostCallback(OnListSchedulesOperationCompleted);
            }
            InvokeAsync("ListSchedules", new object[0], _listSchedulesOperationCompleted, userState);
        }

        void OnListSchedulesOperationCompleted(object arg)
        {
            if ((ListSchedulesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSchedulesCompleted(this,
                                       new ListSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/PauseS" +
                            "chedule",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void PauseSchedule(string ScheduleID)
        {
            Invoke("PauseSchedule", new object[]
                                        {
                                            ScheduleID
                                        });
        }

        /// <remarks/>
        public IAsyncResult BeginPauseSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("PauseSchedule", new object[]
                                                    {
                                                        ScheduleID
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public void EndPauseSchedule(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void PauseScheduleAsync(string ScheduleID)
        {
            PauseScheduleAsync(ScheduleID, null);
        }

        /// <remarks/>
        public void PauseScheduleAsync(string ScheduleID, object userState)
        {
            if ((_pauseScheduleOperationCompleted == null))
            {
                _pauseScheduleOperationCompleted = new SendOrPostCallback(OnPauseScheduleOperationCompleted);
            }
            InvokeAsync("PauseSchedule", new object[]
                                             {
                                                 ScheduleID
                                             }, _pauseScheduleOperationCompleted, userState);
        }

        void OnPauseScheduleOperationCompleted(object arg)
        {
            if ((PauseScheduleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                PauseScheduleCompleted(this,
                                       new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Resume" +
                            "Schedule",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void ResumeSchedule(string ScheduleID)
        {
            Invoke("ResumeSchedule", new object[]
                                         {
                                             ScheduleID
                                         });
        }

        /// <remarks/>
        public IAsyncResult BeginResumeSchedule(string ScheduleID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ResumeSchedule", new object[]
                                                     {
                                                         ScheduleID
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public void EndResumeSchedule(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ResumeScheduleAsync(string ScheduleID)
        {
            ResumeScheduleAsync(ScheduleID, null);
        }

        /// <remarks/>
        public void ResumeScheduleAsync(string ScheduleID, object userState)
        {
            if ((_resumeScheduleOperationCompleted == null))
            {
                _resumeScheduleOperationCompleted = new SendOrPostCallback(OnResumeScheduleOperationCompleted);
            }
            InvokeAsync("ResumeSchedule", new object[]
                                              {
                                                  ScheduleID
                                              }, _resumeScheduleOperationCompleted, userState);
        }

        void OnResumeScheduleOperationCompleted(object arg)
        {
            if ((ResumeScheduleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ResumeScheduleCompleted(this,
                                        new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Subscription",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("SubscriptionID")]
        public string CreateSubscription(string report, ExtensionSettings ExtensionSettings, string Description,
                                         string EventType, string MatchData, ParameterValue[] Parameters)
        {
            object[] results = Invoke("CreateSubscription", new object[]
                                                                {
                                                                    report,
                                                                    ExtensionSettings,
                                                                    Description,
                                                                    EventType,
                                                                    MatchData,
                                                                    Parameters
                                                                });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateSubscription(string report, ExtensionSettings ExtensionSettings,
                                                    string Description, string EventType, string MatchData,
                                                    ParameterValue[] Parameters, AsyncCallback callback,
                                                    object asyncState)
        {
            return BeginInvoke("CreateSubscription", new object[]
                                                         {
                                                             report,
                                                             ExtensionSettings,
                                                             Description,
                                                             EventType,
                                                             MatchData,
                                                             Parameters
                                                         }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateSubscription(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CreateSubscriptionAsync(string report, ExtensionSettings ExtensionSettings, string Description,
                                            string EventType, string MatchData, ParameterValue[] Parameters)
        {
            CreateSubscriptionAsync(report, ExtensionSettings, Description, EventType, MatchData, Parameters, null);
        }

        /// <remarks/>
        public void CreateSubscriptionAsync(string report, ExtensionSettings ExtensionSettings, string Description,
                                            string EventType, string MatchData, ParameterValue[] Parameters,
                                            object userState)
        {
            if ((_createSubscriptionOperationCompleted == null))
            {
                _createSubscriptionOperationCompleted = new SendOrPostCallback(OnCreateSubscriptionOperationCompleted);
            }
            InvokeAsync("CreateSubscription", new object[]
                                                  {
                                                      report,
                                                      ExtensionSettings,
                                                      Description,
                                                      EventType,
                                                      MatchData,
                                                      Parameters
                                                  }, _createSubscriptionOperationCompleted, userState);
        }

        void OnCreateSubscriptionOperationCompleted(object arg)
        {
            if ((CreateSubscriptionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateSubscriptionCompleted(this,
                                            new CreateSubscriptionCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "DataDrivenSubscription",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("SubscriptionID")]
        public string CreateDataDrivenSubscription(string report, ExtensionSettings ExtensionSettings,
                                                   DataRetrievalPlan DataRetrievalPlan, string Description,
                                                   string EventType, string MatchData,
                                                   ParameterValueOrFieldReference[] Parameters)
        {
            object[] results = Invoke("CreateDataDrivenSubscription", new object[]
                                                                          {
                                                                              report,
                                                                              ExtensionSettings,
                                                                              DataRetrievalPlan,
                                                                              Description,
                                                                              EventType,
                                                                              MatchData,
                                                                              Parameters
                                                                          });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginCreateDataDrivenSubscription(string report, ExtensionSettings ExtensionSettings,
                                                              DataRetrievalPlan DataRetrievalPlan, string Description,
                                                              string EventType, string MatchData,
                                                              ParameterValueOrFieldReference[] Parameters,
                                                              AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("CreateDataDrivenSubscription", new object[]
                                                                   {
                                                                       report,
                                                                       ExtensionSettings,
                                                                       DataRetrievalPlan,
                                                                       Description,
                                                                       EventType,
                                                                       MatchData,
                                                                       Parameters
                                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateDataDrivenSubscription(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync(string report, ExtensionSettings ExtensionSettings,
                                                      DataRetrievalPlan DataRetrievalPlan, string Description,
                                                      string EventType, string MatchData,
                                                      ParameterValueOrFieldReference[] Parameters)
        {
            CreateDataDrivenSubscriptionAsync(report, ExtensionSettings, DataRetrievalPlan, Description, EventType,
                                              MatchData, Parameters, null);
        }

        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync(string report, ExtensionSettings ExtensionSettings,
                                                      DataRetrievalPlan DataRetrievalPlan, string Description,
                                                      string EventType, string MatchData,
                                                      ParameterValueOrFieldReference[] Parameters, object userState)
        {
            if ((_createDataDrivenSubscriptionOperationCompleted == null))
            {
                _createDataDrivenSubscriptionOperationCompleted =
                    new SendOrPostCallback(OnCreateDataDrivenSubscriptionOperationCompleted);
            }
            InvokeAsync("CreateDataDrivenSubscription", new object[]
                                                            {
                                                                report,
                                                                ExtensionSettings,
                                                                DataRetrievalPlan,
                                                                Description,
                                                                EventType,
                                                                MatchData,
                                                                Parameters
                                                            }, _createDataDrivenSubscriptionOperationCompleted, userState);
        }

        void OnCreateDataDrivenSubscriptionOperationCompleted(object arg)
        {
            if ((CreateDataDrivenSubscriptionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateDataDrivenSubscriptionCompleted(this,
                                                      new CreateDataDrivenSubscriptionCompletedEventArgs(
                                                          invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                          invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSub" +
                            "scriptionProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings,
                                              string Description, string EventType, string MatchData,
                                              ParameterValue[] Parameters)
        {
            Invoke("SetSubscriptionProperties", new object[]
                                                    {
                                                        SubscriptionID,
                                                        ExtensionSettings,
                                                        Description,
                                                        EventType,
                                                        MatchData,
                                                        Parameters
                                                    });
        }

        /// <remarks/>
        public IAsyncResult BeginSetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings,
                                                           string Description, string EventType, string MatchData,
                                                           ParameterValue[] Parameters, AsyncCallback callback,
                                                           object asyncState)
        {
            return BeginInvoke("SetSubscriptionProperties", new object[]
                                                                {
                                                                    SubscriptionID,
                                                                    ExtensionSettings,
                                                                    Description,
                                                                    EventType,
                                                                    MatchData,
                                                                    Parameters
                                                                }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetSubscriptionProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetSubscriptionPropertiesAsync(string SubscriptionID, ExtensionSettings ExtensionSettings,
                                                   string Description, string EventType, string MatchData,
                                                   ParameterValue[] Parameters)
        {
            SetSubscriptionPropertiesAsync(SubscriptionID, ExtensionSettings, Description, EventType, MatchData,
                                           Parameters, null);
        }

        /// <remarks/>
        public void SetSubscriptionPropertiesAsync(string SubscriptionID, ExtensionSettings ExtensionSettings,
                                                   string Description, string EventType, string MatchData,
                                                   ParameterValue[] Parameters, object userState)
        {
            if ((_setSubscriptionPropertiesOperationCompleted == null))
            {
                _setSubscriptionPropertiesOperationCompleted =
                    new SendOrPostCallback(OnSetSubscriptionPropertiesOperationCompleted);
            }
            InvokeAsync("SetSubscriptionProperties", new object[]
                                                         {
                                                             SubscriptionID,
                                                             ExtensionSettings,
                                                             Description,
                                                             EventType,
                                                             MatchData,
                                                             Parameters
                                                         }, _setSubscriptionPropertiesOperationCompleted, userState);
        }

        void OnSetSubscriptionPropertiesOperationCompleted(object arg)
        {
            if ((SetSubscriptionPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetSubscriptionPropertiesCompleted(this,
                                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
                            "aDrivenSubscriptionProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
                                                        ExtensionSettings ExtensionSettings,
                                                        DataRetrievalPlan DataRetrievalPlan, string Description,
                                                        string EventType, string MatchData,
                                                        ParameterValueOrFieldReference[] Parameters)
        {
            Invoke("SetDataDrivenSubscriptionProperties", new object[]
                                                              {
                                                                  DataDrivenSubscriptionID,
                                                                  ExtensionSettings,
                                                                  DataRetrievalPlan,
                                                                  Description,
                                                                  EventType,
                                                                  MatchData,
                                                                  Parameters
                                                              });
        }

        /// <remarks/>
        public IAsyncResult BeginSetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
                                                                     ExtensionSettings ExtensionSettings,
                                                                     DataRetrievalPlan DataRetrievalPlan,
                                                                     string Description, string EventType,
                                                                     string MatchData,
                                                                     ParameterValueOrFieldReference[] Parameters,
                                                                     AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetDataDrivenSubscriptionProperties", new object[]
                                                                          {
                                                                              DataDrivenSubscriptionID,
                                                                              ExtensionSettings,
                                                                              DataRetrievalPlan,
                                                                              Description,
                                                                              EventType,
                                                                              MatchData,
                                                                              Parameters
                                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetDataDrivenSubscriptionProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID,
                                                             ExtensionSettings ExtensionSettings,
                                                             DataRetrievalPlan DataRetrievalPlan, string Description,
                                                             string EventType, string MatchData,
                                                             ParameterValueOrFieldReference[] Parameters)
        {
            SetDataDrivenSubscriptionPropertiesAsync(DataDrivenSubscriptionID, ExtensionSettings, DataRetrievalPlan,
                                                     Description, EventType, MatchData, Parameters, null);
        }

        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID,
                                                             ExtensionSettings ExtensionSettings,
                                                             DataRetrievalPlan DataRetrievalPlan, string Description,
                                                             string EventType, string MatchData,
                                                             ParameterValueOrFieldReference[] Parameters,
                                                             object userState)
        {
            if ((_setDataDrivenSubscriptionPropertiesOperationCompleted == null))
            {
                _setDataDrivenSubscriptionPropertiesOperationCompleted =
                    new SendOrPostCallback(OnSetDataDrivenSubscriptionPropertiesOperationCompleted);
            }
            InvokeAsync("SetDataDrivenSubscriptionProperties", new object[]
                                                                   {
                                                                       DataDrivenSubscriptionID,
                                                                       ExtensionSettings,
                                                                       DataRetrievalPlan,
                                                                       Description,
                                                                       EventType,
                                                                       MatchData,
                                                                       Parameters
                                                                   },
                        _setDataDrivenSubscriptionPropertiesOperationCompleted, userState);
        }

        void OnSetDataDrivenSubscriptionPropertiesOperationCompleted(object arg)
        {
            if ((SetDataDrivenSubscriptionPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetDataDrivenSubscriptionPropertiesCompleted(this,
                                                             new AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSub" +
                            "scriptionProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Owner")]
        public string GetSubscriptionProperties(string SubscriptionID, out ExtensionSettings ExtensionSettings,
                                                out string Description, out ActiveState Active, out string Status,
                                                out string EventType, out string MatchData,
                                                out ParameterValue[] Parameters)
        {
            object[] results = Invoke("GetSubscriptionProperties", new object[]
                                                                       {
                                                                           SubscriptionID
                                                                       });
            ExtensionSettings = ((ExtensionSettings) (results[1]));
            Description = ((string) (results[2]));
            Active = ((ActiveState) (results[3]));
            Status = ((string) (results[4]));
            EventType = ((string) (results[5]));
            MatchData = ((string) (results[6]));
            Parameters = ((ParameterValue[]) (results[7]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetSubscriptionProperties(string SubscriptionID, AsyncCallback callback,
                                                           object asyncState)
        {
            return BeginInvoke("GetSubscriptionProperties", new object[]
                                                                {
                                                                    SubscriptionID
                                                                }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetSubscriptionProperties(IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings,
                                                   out string Description, out ActiveState Active, out string Status,
                                                   out string EventType, out string MatchData,
                                                   out ParameterValue[] Parameters)
        {
            object[] results = EndInvoke(asyncResult);
            ExtensionSettings = ((ExtensionSettings) (results[1]));
            Description = ((string) (results[2]));
            Active = ((ActiveState) (results[3]));
            Status = ((string) (results[4]));
            EventType = ((string) (results[5]));
            MatchData = ((string) (results[6]));
            Parameters = ((ParameterValue[]) (results[7]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetSubscriptionPropertiesAsync(string SubscriptionID)
        {
            GetSubscriptionPropertiesAsync(SubscriptionID, null);
        }

        /// <remarks/>
        public void GetSubscriptionPropertiesAsync(string SubscriptionID, object userState)
        {
            if ((_getSubscriptionPropertiesOperationCompleted == null))
            {
                _getSubscriptionPropertiesOperationCompleted =
                    new SendOrPostCallback(OnGetSubscriptionPropertiesOperationCompleted);
            }
            InvokeAsync("GetSubscriptionProperties", new object[]
                                                         {
                                                             SubscriptionID
                                                         }, _getSubscriptionPropertiesOperationCompleted, userState);
        }

        void OnGetSubscriptionPropertiesOperationCompleted(object arg)
        {
            if ((GetSubscriptionPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetSubscriptionPropertiesCompleted(this,
                                                   new GetSubscriptionPropertiesCompletedEventArgs(invokeArgs.Results,
                                                                                                   invokeArgs.Error,
                                                                                                   invokeArgs.Cancelled,
                                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
                            "aDrivenSubscriptionProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("Owner")]
        public string GetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
                                                          out ExtensionSettings ExtensionSettings,
                                                          out DataRetrievalPlan DataRetrievalPlan,
                                                          out string Description, out ActiveState Active,
                                                          out string Status, out string EventType, out string MatchData,
                                                          out ParameterValueOrFieldReference[] Parameters)
        {
            object[] results = Invoke("GetDataDrivenSubscriptionProperties", new object[]
                                                                                 {
                                                                                     DataDrivenSubscriptionID
                                                                                 });
            ExtensionSettings = ((ExtensionSettings) (results[1]));
            DataRetrievalPlan = ((DataRetrievalPlan) (results[2]));
            Description = ((string) (results[3]));
            Active = ((ActiveState) (results[4]));
            Status = ((string) (results[5]));
            EventType = ((string) (results[6]));
            MatchData = ((string) (results[7]));
            Parameters = ((ParameterValueOrFieldReference[]) (results[8]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID,
                                                                     AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetDataDrivenSubscriptionProperties", new object[]
                                                                          {
                                                                              DataDrivenSubscriptionID
                                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetDataDrivenSubscriptionProperties(IAsyncResult asyncResult,
                                                             out ExtensionSettings ExtensionSettings,
                                                             out DataRetrievalPlan DataRetrievalPlan,
                                                             out string Description, out ActiveState Active,
                                                             out string Status, out string EventType,
                                                             out string MatchData,
                                                             out ParameterValueOrFieldReference[] Parameters)
        {
            object[] results = EndInvoke(asyncResult);
            ExtensionSettings = ((ExtensionSettings) (results[1]));
            DataRetrievalPlan = ((DataRetrievalPlan) (results[2]));
            Description = ((string) (results[3]));
            Active = ((ActiveState) (results[4]));
            Status = ((string) (results[5]));
            EventType = ((string) (results[6]));
            MatchData = ((string) (results[7]));
            Parameters = ((ParameterValueOrFieldReference[]) (results[8]));
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID)
        {
            GetDataDrivenSubscriptionPropertiesAsync(DataDrivenSubscriptionID, null);
        }

        /// <remarks/>
        public void GetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID, object userState)
        {
            if ((_getDataDrivenSubscriptionPropertiesOperationCompleted == null))
            {
                _getDataDrivenSubscriptionPropertiesOperationCompleted =
                    new SendOrPostCallback(OnGetDataDrivenSubscriptionPropertiesOperationCompleted);
            }
            InvokeAsync("GetDataDrivenSubscriptionProperties", new object[]
                                                                   {
                                                                       DataDrivenSubscriptionID
                                                                   },
                        _getDataDrivenSubscriptionPropertiesOperationCompleted, userState);
        }

        void OnGetDataDrivenSubscriptionPropertiesOperationCompleted(object arg)
        {
            if ((GetDataDrivenSubscriptionPropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetDataDrivenSubscriptionPropertiesCompleted(this,
                                                             new GetDataDrivenSubscriptionPropertiesCompletedEventArgs(
                                                                 invokeArgs.Results, invokeArgs.Error,
                                                                 invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                            "Subscription",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteSubscription(string SubscriptionID)
        {
            Invoke("DeleteSubscription", new object[]
                                             {
                                                 SubscriptionID
                                             });
        }

        /// <remarks/>
        public IAsyncResult BeginDeleteSubscription(string SubscriptionID, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("DeleteSubscription", new object[]
                                                         {
                                                             SubscriptionID
                                                         }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteSubscription(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteSubscriptionAsync(string SubscriptionID)
        {
            DeleteSubscriptionAsync(SubscriptionID, null);
        }

        /// <remarks/>
        public void DeleteSubscriptionAsync(string SubscriptionID, object userState)
        {
            if ((_deleteSubscriptionOperationCompleted == null))
            {
                _deleteSubscriptionOperationCompleted = new SendOrPostCallback(OnDeleteSubscriptionOperationCompleted);
            }
            InvokeAsync("DeleteSubscription", new object[]
                                                  {
                                                      SubscriptionID
                                                  }, _deleteSubscriptionOperationCompleted, userState);
        }

        void OnDeleteSubscriptionOperationCompleted(object arg)
        {
            if ((DeleteSubscriptionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteSubscriptionCompleted(this,
                                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Prepar" +
                            "eQuery",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlElement("DataSettings")]
        public DataSetDefinition PrepareQuery(DataSource DataSource, DataSetDefinition DataSet, out bool Changed)
        {
            object[] results = Invoke("PrepareQuery", new object[]
                                                          {
                                                              DataSource,
                                                              DataSet
                                                          });
            Changed = ((bool) (results[1]));
            return ((DataSetDefinition) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginPrepareQuery(DataSource DataSource, DataSetDefinition DataSet, AsyncCallback callback,
                                              object asyncState)
        {
            return BeginInvoke("PrepareQuery", new object[]
                                                   {
                                                       DataSource,
                                                       DataSet
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public DataSetDefinition EndPrepareQuery(IAsyncResult asyncResult, out bool Changed)
        {
            object[] results = EndInvoke(asyncResult);
            Changed = ((bool) (results[1]));
            return ((DataSetDefinition) (results[0]));
        }

        /// <remarks/>
        public void PrepareQueryAsync(DataSource DataSource, DataSetDefinition DataSet)
        {
            PrepareQueryAsync(DataSource, DataSet, null);
        }

        /// <remarks/>
        public void PrepareQueryAsync(DataSource DataSource, DataSetDefinition DataSet, object userState)
        {
            if ((_prepareQueryOperationCompleted == null))
            {
                _prepareQueryOperationCompleted = new SendOrPostCallback(OnPrepareQueryOperationCompleted);
            }
            InvokeAsync("PrepareQuery", new object[]
                                            {
                                                DataSource,
                                                DataSet
                                            }, _prepareQueryOperationCompleted, userState);
        }

        void OnPrepareQueryOperationCompleted(object arg)
        {
            if ((PrepareQueryCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                PrepareQueryCompleted(this,
                                      new PrepareQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExt" +
                            "ensionSettings",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("ExtensionParameters")]
        public ExtensionParameter[] GetExtensionSettings(string Extension)
        {
            object[] results = Invoke("GetExtensionSettings", new object[]
                                                                  {
                                                                      Extension
                                                                  });
            return ((ExtensionParameter[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetExtensionSettings(string Extension, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetExtensionSettings", new object[]
                                                           {
                                                               Extension
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public ExtensionParameter[] EndGetExtensionSettings(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((ExtensionParameter[]) (results[0]));
        }

        /// <remarks/>
        public void GetExtensionSettingsAsync(string Extension)
        {
            GetExtensionSettingsAsync(Extension, null);
        }

        /// <remarks/>
        public void GetExtensionSettingsAsync(string Extension, object userState)
        {
            if ((_getExtensionSettingsOperationCompleted == null))
            {
                _getExtensionSettingsOperationCompleted = new SendOrPostCallback(OnGetExtensionSettingsOperationCompleted);
            }
            InvokeAsync("GetExtensionSettings", new object[]
                                                    {
                                                        Extension
                                                    }, _getExtensionSettingsOperationCompleted, userState);
        }

        void OnGetExtensionSettingsOperationCompleted(object arg)
        {
            if ((GetExtensionSettingsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetExtensionSettingsCompleted(this,
                                              new GetExtensionSettingsCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Valida" +
                            "teExtensionSettings",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("ParameterErrors")]
        public ExtensionParameter[] ValidateExtensionSettings(string Extension,
                                                              ParameterValueOrFieldReference[] ParameterValues)
        {
            object[] results = Invoke("ValidateExtensionSettings", new object[]
                                                                       {
                                                                           Extension,
                                                                           ParameterValues
                                                                       });
            return ((ExtensionParameter[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginValidateExtensionSettings(string Extension,
                                                           ParameterValueOrFieldReference[] ParameterValues,
                                                           AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ValidateExtensionSettings", new object[]
                                                                {
                                                                    Extension,
                                                                    ParameterValues
                                                                }, callback, asyncState);
        }

        /// <remarks/>
        public ExtensionParameter[] EndValidateExtensionSettings(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((ExtensionParameter[]) (results[0]));
        }

        /// <remarks/>
        public void ValidateExtensionSettingsAsync(string Extension, ParameterValueOrFieldReference[] ParameterValues)
        {
            ValidateExtensionSettingsAsync(Extension, ParameterValues, null);
        }

        /// <remarks/>
        public void ValidateExtensionSettingsAsync(string Extension, ParameterValueOrFieldReference[] ParameterValues,
                                                   object userState)
        {
            if ((_validateExtensionSettingsOperationCompleted == null))
            {
                _validateExtensionSettingsOperationCompleted =
                    new SendOrPostCallback(OnValidateExtensionSettingsOperationCompleted);
            }
            InvokeAsync("ValidateExtensionSettings", new object[]
                                                         {
                                                             Extension,
                                                             ParameterValues
                                                         }, _validateExtensionSettingsOperationCompleted, userState);
        }

        void OnValidateExtensionSettingsOperationCompleted(object arg)
        {
            if ((ValidateExtensionSettingsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ValidateExtensionSettingsCompleted(this,
                                                   new ValidateExtensionSettingsCompletedEventArgs(invokeArgs.Results,
                                                                                                   invokeArgs.Error,
                                                                                                   invokeArgs.Cancelled,
                                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
                            "bscriptions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("SubscriptionItems")]
        public Subscription[] ListSubscriptions(string report, string Owner)
        {
            object[] results = Invoke("ListSubscriptions", new object[]
                                                               {
                                                                   report,
                                                                   Owner
                                                               });
            return ((Subscription[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSubscriptions(string report, string Owner, AsyncCallback callback,
                                                   object asyncState)
        {
            return BeginInvoke("ListSubscriptions", new object[]
                                                        {
                                                            report,
                                                            Owner
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public Subscription[] EndListSubscriptions(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Subscription[]) (results[0]));
        }

        /// <remarks/>
        public void ListSubscriptionsAsync(string report, string Owner)
        {
            ListSubscriptionsAsync(report, Owner, null);
        }

        /// <remarks/>
        public void ListSubscriptionsAsync(string report, string Owner, object userState)
        {
            if ((_listSubscriptionsOperationCompleted == null))
            {
                _listSubscriptionsOperationCompleted = new SendOrPostCallback(OnListSubscriptionsOperationCompleted);
            }
            InvokeAsync("ListSubscriptions", new object[]
                                                 {
                                                     report,
                                                     Owner
                                                 }, _listSubscriptionsOperationCompleted, userState);
        }

        void OnListSubscriptionsOperationCompleted(object arg)
        {
            if ((ListSubscriptionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSubscriptionsCompleted(this,
                                           new ListSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
                            "bscriptionsUsingDataSource",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("SubscriptionItems")]
        public Subscription[] ListSubscriptionsUsingDataSource(string DataSource)
        {
            object[] results = Invoke("ListSubscriptionsUsingDataSource", new object[]
                                                                              {
                                                                                  DataSource
                                                                              });
            return ((Subscription[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSubscriptionsUsingDataSource(string DataSource, AsyncCallback callback,
                                                                  object asyncState)
        {
            return BeginInvoke("ListSubscriptionsUsingDataSource", new object[]
                                                                       {
                                                                           DataSource
                                                                       }, callback, asyncState);
        }

        /// <remarks/>
        public Subscription[] EndListSubscriptionsUsingDataSource(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Subscription[]) (results[0]));
        }

        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync(string DataSource)
        {
            ListSubscriptionsUsingDataSourceAsync(DataSource, null);
        }

        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync(string DataSource, object userState)
        {
            if ((_listSubscriptionsUsingDataSourceOperationCompleted == null))
            {
                _listSubscriptionsUsingDataSourceOperationCompleted =
                    new SendOrPostCallback(OnListSubscriptionsUsingDataSourceOperationCompleted);
            }
            InvokeAsync("ListSubscriptionsUsingDataSource", new object[]
                                                                {
                                                                    DataSource
                                                                }, _listSubscriptionsUsingDataSourceOperationCompleted,
                        userState);
        }

        void OnListSubscriptionsUsingDataSourceOperationCompleted(object arg)
        {
            if ((ListSubscriptionsUsingDataSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSubscriptionsUsingDataSourceCompleted(this,
                                                          new ListSubscriptionsUsingDataSourceCompletedEventArgs(
                                                              invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                              invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEx" +
                            "tensions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Extensions")]
        public Extension[] ListExtensions(ExtensionTypeEnum ExtensionType)
        {
            object[] results = Invoke("ListExtensions", new object[]
                                                            {
                                                                ExtensionType
                                                            });
            return ((Extension[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListExtensions(ExtensionTypeEnum ExtensionType, AsyncCallback callback,
                                                object asyncState)
        {
            return BeginInvoke("ListExtensions", new object[]
                                                     {
                                                         ExtensionType
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public Extension[] EndListExtensions(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Extension[]) (results[0]));
        }

        /// <remarks/>
        public void ListExtensionsAsync(ExtensionTypeEnum ExtensionType)
        {
            ListExtensionsAsync(ExtensionType, null);
        }

        /// <remarks/>
        public void ListExtensionsAsync(ExtensionTypeEnum ExtensionType, object userState)
        {
            if ((_listExtensionsOperationCompleted == null))
            {
                _listExtensionsOperationCompleted = new SendOrPostCallback(OnListExtensionsOperationCompleted);
            }
            InvokeAsync("ListExtensions", new object[]
                                              {
                                                  ExtensionType
                                              }, _listExtensionsOperationCompleted, userState);
        }

        void OnListExtensionsOperationCompleted(object arg)
        {
            if ((ListExtensionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListExtensionsCompleted(this,
                                        new ListExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEv" +
                            "ents",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Events")]
        public Event[] ListEvents()
        {
            object[] results = Invoke("ListEvents", new object[0]);
            return ((Event[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListEvents(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListEvents", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Event[] EndListEvents(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Event[]) (results[0]));
        }

        /// <remarks/>
        public void ListEventsAsync()
        {
            ListEventsAsync(null);
        }

        /// <remarks/>
        public void ListEventsAsync(object userState)
        {
            if ((_listEventsOperationCompleted == null))
            {
                _listEventsOperationCompleted = new SendOrPostCallback(OnListEventsOperationCompleted);
            }
            InvokeAsync("ListEvents", new object[0], _listEventsOperationCompleted, userState);
        }

        void OnListEventsOperationCompleted(object arg)
        {
            if ((ListEventsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListEventsCompleted(this,
                                    new ListEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                     invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FireEv" +
                            "ent",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void FireEvent(string EventType, string EventData)
        {
            Invoke("FireEvent", new object[]
                                    {
                                        EventType,
                                        EventData
                                    });
        }

        /// <remarks/>
        public IAsyncResult BeginFireEvent(string EventType, string EventData, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("FireEvent", new object[]
                                                {
                                                    EventType,
                                                    EventData
                                                }, callback, asyncState);
        }

        /// <remarks/>
        public void EndFireEvent(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void FireEventAsync(string EventType, string EventData)
        {
            FireEventAsync(EventType, EventData, null);
        }

        /// <remarks/>
        public void FireEventAsync(string EventType, string EventData, object userState)
        {
            if ((_fireEventOperationCompleted == null))
            {
                _fireEventOperationCompleted = new SendOrPostCallback(OnFireEventOperationCompleted);
            }
            InvokeAsync("FireEvent", new object[]
                                         {
                                             EventType,
                                             EventData
                                         }, _fireEventOperationCompleted, userState);
        }

        void OnFireEventOperationCompleted(object arg)
        {
            if ((FireEventCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                FireEventCompleted(this,
                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
                            "stemTasks",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Tasks")]
        public Task[] ListSystemTasks()
        {
            object[] results = Invoke("ListSystemTasks", new object[0]);
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSystemTasks(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListSystemTasks", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Task[] EndListSystemTasks(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public void ListSystemTasksAsync()
        {
            ListSystemTasksAsync(null);
        }

        /// <remarks/>
        public void ListSystemTasksAsync(object userState)
        {
            if ((_listSystemTasksOperationCompleted == null))
            {
                _listSystemTasksOperationCompleted = new SendOrPostCallback(OnListSystemTasksOperationCompleted);
            }
            InvokeAsync("ListSystemTasks", new object[0], _listSystemTasksOperationCompleted, userState);
        }

        void OnListSystemTasksOperationCompleted(object arg)
        {
            if ((ListSystemTasksCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSystemTasksCompleted(this,
                                         new ListSystemTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListTa" +
                            "sks",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Tasks")]
        public Task[] ListTasks()
        {
            object[] results = Invoke("ListTasks", new object[0]);
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListTasks(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListTasks", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Task[] EndListTasks(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public void ListTasksAsync()
        {
            ListTasksAsync(null);
        }

        /// <remarks/>
        public void ListTasksAsync(object userState)
        {
            if ((_listTasksOperationCompleted == null))
            {
                _listTasksOperationCompleted = new SendOrPostCallback(OnListTasksOperationCompleted);
            }
            InvokeAsync("ListTasks", new object[0], _listTasksOperationCompleted, userState);
        }

        void OnListTasksOperationCompleted(object arg)
        {
            if ((ListTasksCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListTasksCompleted(this,
                                   new ListTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
                            "stemRoles",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Roles")]
        public Role[] ListSystemRoles()
        {
            object[] results = Invoke("ListSystemRoles", new object[0]);
            return ((Role[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListSystemRoles(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListSystemRoles", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Role[] EndListSystemRoles(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Role[]) (results[0]));
        }

        /// <remarks/>
        public void ListSystemRolesAsync()
        {
            ListSystemRolesAsync(null);
        }

        /// <remarks/>
        public void ListSystemRolesAsync(object userState)
        {
            if ((_listSystemRolesOperationCompleted == null))
            {
                _listSystemRolesOperationCompleted = new SendOrPostCallback(OnListSystemRolesOperationCompleted);
            }
            InvokeAsync("ListSystemRoles", new object[0], _listSystemRolesOperationCompleted, userState);
        }

        void OnListSystemRolesOperationCompleted(object arg)
        {
            if ((ListSystemRolesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListSystemRolesCompleted(this,
                                         new ListSystemRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRo" +
                            "les",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Roles")]
        public Role[] ListRoles()
        {
            object[] results = Invoke("ListRoles", new object[0]);
            return ((Role[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginListRoles(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("ListRoles", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Role[] EndListRoles(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Role[]) (results[0]));
        }

        /// <remarks/>
        public void ListRolesAsync()
        {
            ListRolesAsync(null);
        }

        /// <remarks/>
        public void ListRolesAsync(object userState)
        {
            if ((_listRolesOperationCompleted == null))
            {
                _listRolesOperationCompleted = new SendOrPostCallback(OnListRolesOperationCompleted);
            }
            InvokeAsync("ListRoles", new object[0], _listRolesOperationCompleted, userState);
        }

        void OnListRolesOperationCompleted(object arg)
        {
            if ((ListRolesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListRolesCompleted(this,
                                   new ListRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
                            "Role",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CreateRole(string Name, string Description, Task[] Tasks)
        {
            Invoke("CreateRole", new object[]
                                     {
                                         Name,
                                         Description,
                                         Tasks
                                     });
        }

        /// <remarks/>
        public IAsyncResult BeginCreateRole(string Name, string Description, Task[] Tasks, AsyncCallback callback,
                                            object asyncState)
        {
            return BeginInvoke("CreateRole", new object[]
                                                 {
                                                     Name,
                                                     Description,
                                                     Tasks
                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateRole(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateRoleAsync(string Name, string Description, Task[] Tasks)
        {
            CreateRoleAsync(Name, Description, Tasks, null);
        }

        /// <remarks/>
        public void CreateRoleAsync(string Name, string Description, Task[] Tasks, object userState)
        {
            if ((_createRoleOperationCompleted == null))
            {
                _createRoleOperationCompleted = new SendOrPostCallback(OnCreateRoleOperationCompleted);
            }
            InvokeAsync("CreateRole", new object[]
                                          {
                                              Name,
                                              Description,
                                              Tasks
                                          }, _createRoleOperationCompleted, userState);
        }

        void OnCreateRoleOperationCompleted(object arg)
        {
            if ((CreateRoleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateRoleCompleted(this,
                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
                            "Role",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteRole(string Name)
        {
            Invoke("DeleteRole", new object[]
                                     {
                                         Name
                                     });
        }

        /// <remarks/>
        public IAsyncResult BeginDeleteRole(string Name, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("DeleteRole", new object[]
                                                 {
                                                     Name
                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteRole(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteRoleAsync(string Name)
        {
            DeleteRoleAsync(Name, null);
        }

        /// <remarks/>
        public void DeleteRoleAsync(string Name, object userState)
        {
            if ((_deleteRoleOperationCompleted == null))
            {
                _deleteRoleOperationCompleted = new SendOrPostCallback(OnDeleteRoleOperationCompleted);
            }
            InvokeAsync("DeleteRole", new object[]
                                          {
                                              Name
                                          }, _deleteRoleOperationCompleted, userState);
        }

        void OnDeleteRoleOperationCompleted(object arg)
        {
            if ((DeleteRoleCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteRoleCompleted(this,
                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRol" +
                            "eProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Tasks")]
        public Task[] GetRoleProperties(string Name, out string Description)
        {
            object[] results = Invoke("GetRoleProperties", new object[]
                                                               {
                                                                   Name
                                                               });
            Description = ((string) (results[1]));
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetRoleProperties(string Name, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetRoleProperties", new object[]
                                                        {
                                                            Name
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public Task[] EndGetRoleProperties(IAsyncResult asyncResult, out string Description)
        {
            object[] results = EndInvoke(asyncResult);
            Description = ((string) (results[1]));
            return ((Task[]) (results[0]));
        }

        /// <remarks/>
        public void GetRolePropertiesAsync(string Name)
        {
            GetRolePropertiesAsync(Name, null);
        }

        /// <remarks/>
        public void GetRolePropertiesAsync(string Name, object userState)
        {
            if ((_getRolePropertiesOperationCompleted == null))
            {
                _getRolePropertiesOperationCompleted = new SendOrPostCallback(OnGetRolePropertiesOperationCompleted);
            }
            InvokeAsync("GetRoleProperties", new object[]
                                                 {
                                                     Name
                                                 }, _getRolePropertiesOperationCompleted, userState);
        }

        void OnGetRolePropertiesOperationCompleted(object arg)
        {
            if ((GetRolePropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetRolePropertiesCompleted(this,
                                           new GetRolePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRol" +
                            "eProperties",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetRoleProperties(string Name, string Description, Task[] Tasks)
        {
            Invoke("SetRoleProperties", new object[]
                                            {
                                                Name,
                                                Description,
                                                Tasks
                                            });
        }

        /// <remarks/>
        public IAsyncResult BeginSetRoleProperties(string Name, string Description, Task[] Tasks, AsyncCallback callback,
                                                   object asyncState)
        {
            return BeginInvoke("SetRoleProperties", new object[]
                                                        {
                                                            Name,
                                                            Description,
                                                            Tasks
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetRoleProperties(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetRolePropertiesAsync(string Name, string Description, Task[] Tasks)
        {
            SetRolePropertiesAsync(Name, Description, Tasks, null);
        }

        /// <remarks/>
        public void SetRolePropertiesAsync(string Name, string Description, Task[] Tasks, object userState)
        {
            if ((_setRolePropertiesOperationCompleted == null))
            {
                _setRolePropertiesOperationCompleted = new SendOrPostCallback(OnSetRolePropertiesOperationCompleted);
            }
            InvokeAsync("SetRoleProperties", new object[]
                                                 {
                                                     Name,
                                                     Description,
                                                     Tasks
                                                 }, _setRolePropertiesOperationCompleted, userState);
        }

        void OnSetRolePropertiesOperationCompleted(object arg)
        {
            if ((SetRolePropertiesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetRolePropertiesCompleted(this,
                                           new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                            "temPolicies",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Policies")]
        public Policy[] GetSystemPolicies()
        {
            object[] results = Invoke("GetSystemPolicies", new object[0]);
            return ((Policy[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetSystemPolicies(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetSystemPolicies", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public Policy[] EndGetSystemPolicies(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((Policy[]) (results[0]));
        }

        /// <remarks/>
        public void GetSystemPoliciesAsync()
        {
            GetSystemPoliciesAsync(null);
        }

        /// <remarks/>
        public void GetSystemPoliciesAsync(object userState)
        {
            if ((_getSystemPoliciesOperationCompleted == null))
            {
                _getSystemPoliciesOperationCompleted = new SendOrPostCallback(OnGetSystemPoliciesOperationCompleted);
            }
            InvokeAsync("GetSystemPolicies", new object[0], _getSystemPoliciesOperationCompleted, userState);
        }

        void OnGetSystemPoliciesOperationCompleted(object arg)
        {
            if ((GetSystemPoliciesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetSystemPoliciesCompleted(this,
                                           new GetSystemPoliciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
                            "temPolicies",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetSystemPolicies(Policy[] Policies)
        {
            Invoke("SetSystemPolicies", new object[]
                                            {
                                                Policies
                                            });
        }

        /// <remarks/>
        public IAsyncResult BeginSetSystemPolicies(Policy[] Policies, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetSystemPolicies", new object[]
                                                        {
                                                            Policies
                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetSystemPolicies(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetSystemPoliciesAsync(Policy[] Policies)
        {
            SetSystemPoliciesAsync(Policies, null);
        }

        /// <remarks/>
        public void SetSystemPoliciesAsync(Policy[] Policies, object userState)
        {
            if ((_setSystemPoliciesOperationCompleted == null))
            {
                _setSystemPoliciesOperationCompleted = new SendOrPostCallback(OnSetSystemPoliciesOperationCompleted);
            }
            InvokeAsync("SetSystemPolicies", new object[]
                                                 {
                                                     Policies
                                                 }, _setSystemPoliciesOperationCompleted, userState);
        }

        void OnSetSystemPoliciesOperationCompleted(object arg)
        {
            if ((SetSystemPoliciesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetSystemPoliciesCompleted(this,
                                           new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPol" +
                            "icies",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Policies")]
        public Policy[] GetPolicies(string item, out bool InheritParent)
        {
            object[] results = Invoke("GetPolicies", new object[]
                                                         {
                                                             item
                                                         });
            InheritParent = ((bool) (results[1]));
            return ((Policy[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetPolicies(string item, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetPolicies", new object[]
                                                  {
                                                      item
                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public Policy[] EndGetPolicies(IAsyncResult asyncResult, out bool InheritParent)
        {
            object[] results = EndInvoke(asyncResult);
            InheritParent = ((bool) (results[1]));
            return ((Policy[]) (results[0]));
        }

        /// <remarks/>
        public void GetPoliciesAsync(string item)
        {
            GetPoliciesAsync(item, null);
        }

        /// <remarks/>
        public void GetPoliciesAsync(string item, object userState)
        {
            if ((_getPoliciesOperationCompleted == null))
            {
                _getPoliciesOperationCompleted = new SendOrPostCallback(OnGetPoliciesOperationCompleted);
            }
            InvokeAsync("GetPolicies", new object[]
                                           {
                                               item
                                           }, _getPoliciesOperationCompleted, userState);
        }

        void OnGetPoliciesOperationCompleted(object arg)
        {
            if ((GetPoliciesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetPoliciesCompleted(this,
                                     new GetPoliciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPol" +
                            "icies",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetPolicies(string item, Policy[] Policies)
        {
            Invoke("SetPolicies", new object[]
                                      {
                                          item,
                                          Policies
                                      });
        }

        /// <remarks/>
        public IAsyncResult BeginSetPolicies(string item, Policy[] Policies, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SetPolicies", new object[]
                                                  {
                                                      item,
                                                      Policies
                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetPolicies(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetPoliciesAsync(string item, Policy[] Policies)
        {
            SetPoliciesAsync(item, Policies, null);
        }

        /// <remarks/>
        public void SetPoliciesAsync(string item, Policy[] Policies, object userState)
        {
            if ((_setPoliciesOperationCompleted == null))
            {
                _setPoliciesOperationCompleted = new SendOrPostCallback(OnSetPoliciesOperationCompleted);
            }
            InvokeAsync("SetPolicies", new object[]
                                           {
                                               item,
                                               Policies
                                           }, _setPoliciesOperationCompleted, userState);
        }

        void OnSetPoliciesOperationCompleted(object arg)
        {
            if ((SetPoliciesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetPoliciesCompleted(this,
                                     new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapHeader("BatchHeaderValue")]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Inheri" +
                            "tParentSecurity",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void InheritParentSecurity(string item)
        {
            Invoke("InheritParentSecurity", new object[]
                                                {
                                                    item
                                                });
        }

        /// <remarks/>
        public IAsyncResult BeginInheritParentSecurity(string item, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("InheritParentSecurity", new object[]
                                                            {
                                                                item
                                                            }, callback, asyncState);
        }

        /// <remarks/>
        public void EndInheritParentSecurity(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void InheritParentSecurityAsync(string item)
        {
            InheritParentSecurityAsync(item, null);
        }

        /// <remarks/>
        public void InheritParentSecurityAsync(string item, object userState)
        {
            if ((_inheritParentSecurityOperationCompleted == null))
            {
                _inheritParentSecurityOperationCompleted =
                    new SendOrPostCallback(OnInheritParentSecurityOperationCompleted);
            }
            InvokeAsync("InheritParentSecurity", new object[]
                                                     {
                                                         item
                                                     }, _inheritParentSecurityOperationCompleted, userState);
        }

        void OnInheritParentSecurityOperationCompleted(object arg)
        {
            if ((InheritParentSecurityCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                InheritParentSecurityCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
                            "temPermissions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Permissions")]
        [return: XmlArrayItem("Operation")]
        public string[] GetSystemPermissions()
        {
            object[] results = Invoke("GetSystemPermissions", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetSystemPermissions(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetSystemPermissions", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetSystemPermissions(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void GetSystemPermissionsAsync()
        {
            GetSystemPermissionsAsync(null);
        }

        /// <remarks/>
        public void GetSystemPermissionsAsync(object userState)
        {
            if ((_getSystemPermissionsOperationCompleted == null))
            {
                _getSystemPermissionsOperationCompleted = new SendOrPostCallback(OnGetSystemPermissionsOperationCompleted);
            }
            InvokeAsync("GetSystemPermissions", new object[0], _getSystemPermissionsOperationCompleted, userState);
        }

        void OnGetSystemPermissionsOperationCompleted(object arg)
        {
            if ((GetSystemPermissionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetSystemPermissionsCompleted(this,
                                              new GetSystemPermissionsCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPer" +
                            "missions",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        [return: XmlArray("Permissions")]
        [return: XmlArrayItem("Operation")]
        public string[] GetPermissions(string item)
        {
            object[] results = Invoke("GetPermissions", new object[]
                                                            {
                                                                item
                                                            });
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetPermissions(string item, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetPermissions", new object[]
                                                     {
                                                         item
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetPermissions(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void GetPermissionsAsync(string item)
        {
            GetPermissionsAsync(item, null);
        }

        /// <remarks/>
        public void GetPermissionsAsync(string item, object userState)
        {
            if ((_getPermissionsOperationCompleted == null))
            {
                _getPermissionsOperationCompleted = new SendOrPostCallback(OnGetPermissionsOperationCompleted);
            }
            InvokeAsync("GetPermissions", new object[]
                                              {
                                                  item
                                              }, _getPermissionsOperationCompleted, userState);
        }

        void OnGetPermissionsOperationCompleted(object arg)
        {
            if ((GetPermissionsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetPermissionsCompleted(this,
                                        new GetPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/LogonU" +
                            "ser",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void LogonUser(string userName, string password, string authority)
        {
            Invoke("LogonUser", new object[]
                                    {
                                        userName,
                                        password,
                                        authority
                                    });
        }

        /// <remarks/>
        public IAsyncResult BeginLogonUser(string userName, string password, string authority, AsyncCallback callback,
                                           object asyncState)
        {
            return BeginInvoke("LogonUser", new object[]
                                                {
                                                    userName,
                                                    password,
                                                    authority
                                                }, callback, asyncState);
        }

        /// <remarks/>
        public void EndLogonUser(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void LogonUserAsync(string userName, string password, string authority)
        {
            LogonUserAsync(userName, password, authority, null);
        }

        /// <remarks/>
        public void LogonUserAsync(string userName, string password, string authority, object userState)
        {
            if ((_logonUserOperationCompleted == null))
            {
                _logonUserOperationCompleted = new SendOrPostCallback(OnLogonUserOperationCompleted);
            }
            InvokeAsync("LogonUser", new object[]
                                         {
                                             userName,
                                             password,
                                             authority
                                         }, _logonUserOperationCompleted, userState);
        }

        void OnLogonUserOperationCompleted(object arg)
        {
            if ((LogonUserCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LogonUserCompleted(this,
                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapHeader("ServerInfoHeaderValue", Direction = SoapHeaderDirection.Out)]
        [SoapDocumentMethod("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Logoff" +
                            "",
            RequestNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void Logoff()
        {
            Invoke("Logoff", new object[0]);
        }

        /// <remarks/>
        public IAsyncResult BeginLogoff(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("Logoff", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndLogoff(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void LogoffAsync()
        {
            LogoffAsync(null);
        }

        /// <remarks/>
        public void LogoffAsync(object userState)
        {
            if ((_logoffOperationCompleted == null))
            {
                _logoffOperationCompleted = new SendOrPostCallback(OnLogoffOperationCompleted);
            }
            InvokeAsync("Logoff", new object[0], _logoffOperationCompleted, userState);
        }

        void OnLogoffOperationCompleted(object arg)
        {
            if ((LogoffCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LogoffCompleted(this,
                                new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        IsNullable = false)]
    public class ServerInfoHeader : SoapHeader
    {
        string reportServerEditionField;
        string reportServerVersionNumberField;

        /// <remarks/>
        public string ReportServerVersionNumber
        {
            get { return reportServerVersionNumberField; }
            set { reportServerVersionNumberField = value; }
        }

        /// <remarks/>
        public string ReportServerEdition
        {
            get { return reportServerEditionField; }
            set { reportServerEditionField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Policy
    {
        string groupUserNameField;

        Role[] rolesField;

        /// <remarks/>
        public string GroupUserName
        {
            get { return groupUserNameField; }
            set { groupUserNameField = value; }
        }

        /// <remarks/>
        public Role[] Roles
        {
            get { return rolesField; }
            set { rolesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Role
    {
        string descriptionField;
        string nameField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Task
    {
        string descriptionField;
        string nameField;
        string taskIDField;

        /// <remarks/>
        public string TaskID
        {
            get { return taskIDField; }
            set { taskIDField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Event
    {
        string typeField;

        /// <remarks/>
        public string Type
        {
            get { return typeField; }
            set { typeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Extension
    {
        ExtensionTypeEnum extensionTypeField;

        string localizedNameField;
        string nameField;

        bool visibleField;

        /// <remarks/>
        public ExtensionTypeEnum ExtensionType
        {
            get { return extensionTypeField; }
            set { extensionTypeField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string LocalizedName
        {
            get { return localizedNameField; }
            set { localizedNameField = value; }
        }

        /// <remarks/>
        public bool Visible
        {
            get { return visibleField; }
            set { visibleField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ExtensionTypeEnum
    {
        /// <remarks/>
        Delivery,

        /// <remarks/>
        Render,

        /// <remarks/>
        Data,

        /// <remarks/>
        All,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Subscription
    {
        ActiveState activeField;
        ExtensionSettings deliverySettingsField;

        string descriptionField;
        string eventTypeField;

        bool isDataDrivenField;

        DateTime lastExecutedField;

        bool lastExecutedFieldSpecified;

        string modifiedByField;

        DateTime modifiedDateField;
        string ownerField;

        string pathField;
        string reportField;
        string statusField;
        string subscriptionIDField;
        string virtualPathField;

        /// <remarks/>
        public string SubscriptionID
        {
            get { return subscriptionIDField; }
            set { subscriptionIDField = value; }
        }

        /// <remarks/>
        public string Owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }

        /// <remarks/>
        public string Path
        {
            get { return pathField; }
            set { pathField = value; }
        }

        /// <remarks/>
        public string VirtualPath
        {
            get { return virtualPathField; }
            set { virtualPathField = value; }
        }

        /// <remarks/>
        public string Report
        {
            get { return reportField; }
            set { reportField = value; }
        }

        /// <remarks/>
        public ExtensionSettings DeliverySettings
        {
            get { return deliverySettingsField; }
            set { deliverySettingsField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public string Status
        {
            get { return statusField; }
            set { statusField = value; }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get { return activeField; }
            set { activeField = value; }
        }

        /// <remarks/>
        public DateTime LastExecuted
        {
            get { return lastExecutedField; }
            set { lastExecutedField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool LastExecutedSpecified
        {
            get { return lastExecutedFieldSpecified; }
            set { lastExecutedFieldSpecified = value; }
        }

        /// <remarks/>
        public string ModifiedBy
        {
            get { return modifiedByField; }
            set { modifiedByField = value; }
        }

        /// <remarks/>
        public DateTime ModifiedDate
        {
            get { return modifiedDateField; }
            set { modifiedDateField = value; }
        }

        /// <remarks/>
        public string EventType
        {
            get { return eventTypeField; }
            set { eventTypeField = value; }
        }

        /// <remarks/>
        public bool IsDataDriven
        {
            get { return isDataDrivenField; }
            set { isDataDrivenField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ExtensionSettings
    {
        string extensionField;

        ParameterValueOrFieldReference[] parameterValuesField;

        /// <remarks/>
        public string Extension
        {
            get { return extensionField; }
            set { extensionField = value; }
        }

        /// <remarks/>
        [XmlArrayItem(typeof (ParameterFieldReference))]
        [XmlArrayItem(typeof (ParameterValue))]
        public ParameterValueOrFieldReference[] ParameterValues
        {
            get { return parameterValuesField; }
            set { parameterValuesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ParameterFieldReference : ParameterValueOrFieldReference
    {
        string fieldAliasField;
        string parameterNameField;

        /// <remarks/>
        public string ParameterName
        {
            get { return parameterNameField; }
            set { parameterNameField = value; }
        }

        /// <remarks/>
        public string FieldAlias
        {
            get { return fieldAliasField; }
            set { fieldAliasField = value; }
        }
    }

    /// <remarks/>
    [XmlInclude(typeof (ParameterFieldReference))]
    [XmlInclude(typeof (ParameterValue))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ParameterValueOrFieldReference
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ParameterValue : ParameterValueOrFieldReference
    {
        string labelField;
        string nameField;

        string valueField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }

        /// <remarks/>
        public string Label
        {
            get { return labelField; }
            set { labelField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ActiveState
    {
        bool deliveryExtensionRemovedField;

        bool deliveryExtensionRemovedFieldSpecified;

        bool invalidParameterValueField;

        bool invalidParameterValueFieldSpecified;
        bool missingParameterValueField;

        bool missingParameterValueFieldSpecified;
        bool sharedDataSourceRemovedField;

        bool sharedDataSourceRemovedFieldSpecified;

        bool unknownReportParameterField;

        bool unknownReportParameterFieldSpecified;

        /// <remarks/>
        public bool DeliveryExtensionRemoved
        {
            get { return deliveryExtensionRemovedField; }
            set { deliveryExtensionRemovedField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool DeliveryExtensionRemovedSpecified
        {
            get { return deliveryExtensionRemovedFieldSpecified; }
            set { deliveryExtensionRemovedFieldSpecified = value; }
        }

        /// <remarks/>
        public bool SharedDataSourceRemoved
        {
            get { return sharedDataSourceRemovedField; }
            set { sharedDataSourceRemovedField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool SharedDataSourceRemovedSpecified
        {
            get { return sharedDataSourceRemovedFieldSpecified; }
            set { sharedDataSourceRemovedFieldSpecified = value; }
        }

        /// <remarks/>
        public bool MissingParameterValue
        {
            get { return missingParameterValueField; }
            set { missingParameterValueField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool MissingParameterValueSpecified
        {
            get { return missingParameterValueFieldSpecified; }
            set { missingParameterValueFieldSpecified = value; }
        }

        /// <remarks/>
        public bool InvalidParameterValue
        {
            get { return invalidParameterValueField; }
            set { invalidParameterValueField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool InvalidParameterValueSpecified
        {
            get { return invalidParameterValueFieldSpecified; }
            set { invalidParameterValueFieldSpecified = value; }
        }

        /// <remarks/>
        public bool UnknownReportParameter
        {
            get { return unknownReportParameterField; }
            set { unknownReportParameterField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool UnknownReportParameterSpecified
        {
            get { return unknownReportParameterFieldSpecified; }
            set { unknownReportParameterFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ExtensionParameter
    {
        string displayNameField;

        bool encryptedField;
        string errorField;

        bool isPasswordField;
        string nameField;
        bool readOnlyField;
        bool requiredField;

        bool requiredFieldSpecified;

        ValidValue[] validValuesField;
        string valueField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }

        /// <remarks/>
        public bool Required
        {
            get { return requiredField; }
            set { requiredField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool RequiredSpecified
        {
            get { return requiredFieldSpecified; }
            set { requiredFieldSpecified = value; }
        }

        /// <remarks/>
        public bool ReadOnly
        {
            get { return readOnlyField; }
            set { readOnlyField = value; }
        }

        /// <remarks/>
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }

        /// <remarks/>
        public string Error
        {
            get { return errorField; }
            set { errorField = value; }
        }

        /// <remarks/>
        public bool Encrypted
        {
            get { return encryptedField; }
            set { encryptedField = value; }
        }

        /// <remarks/>
        public bool IsPassword
        {
            get { return isPasswordField; }
            set { isPasswordField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Value")]
        public ValidValue[] ValidValues
        {
            get { return validValuesField; }
            set { validValuesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ValidValue
    {
        string labelField;

        string valueField;

        /// <remarks/>
        public string Label
        {
            get { return labelField; }
            set { labelField = value; }
        }

        /// <remarks/>
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class QueryDefinition
    {
        string commandTextField;
        string commandTypeField;

        int timeoutField;

        bool timeoutFieldSpecified;

        /// <remarks/>
        public string CommandType
        {
            get { return commandTypeField; }
            set { commandTypeField = value; }
        }

        /// <remarks/>
        public string CommandText
        {
            get { return commandTextField; }
            set { commandTextField = value; }
        }

        /// <remarks/>
        public int Timeout
        {
            get { return timeoutField; }
            set { timeoutField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool TimeoutSpecified
        {
            get { return timeoutFieldSpecified; }
            set { timeoutFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Field
    {
        string aliasField;

        string nameField;

        /// <remarks/>
        public string Alias
        {
            get { return aliasField; }
            set { aliasField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSetDefinition
    {
        SensitivityEnum accentSensitivityField;

        bool accentSensitivityFieldSpecified;
        SensitivityEnum caseSensitivityField;

        bool caseSensitivityFieldSpecified;

        string collationField;
        Field[] fieldsField;

        SensitivityEnum kanatypeSensitivityField;

        bool kanatypeSensitivityFieldSpecified;
        string nameField;
        QueryDefinition queryField;

        SensitivityEnum widthSensitivityField;

        bool widthSensitivityFieldSpecified;

        /// <remarks/>
        public Field[] Fields
        {
            get { return fieldsField; }
            set { fieldsField = value; }
        }

        /// <remarks/>
        public QueryDefinition Query
        {
            get { return queryField; }
            set { queryField = value; }
        }

        /// <remarks/>
        public SensitivityEnum CaseSensitivity
        {
            get { return caseSensitivityField; }
            set { caseSensitivityField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool CaseSensitivitySpecified
        {
            get { return caseSensitivityFieldSpecified; }
            set { caseSensitivityFieldSpecified = value; }
        }

        /// <remarks/>
        public string Collation
        {
            get { return collationField; }
            set { collationField = value; }
        }

        /// <remarks/>
        public SensitivityEnum AccentSensitivity
        {
            get { return accentSensitivityField; }
            set { accentSensitivityField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool AccentSensitivitySpecified
        {
            get { return accentSensitivityFieldSpecified; }
            set { accentSensitivityFieldSpecified = value; }
        }

        /// <remarks/>
        public SensitivityEnum KanatypeSensitivity
        {
            get { return kanatypeSensitivityField; }
            set { kanatypeSensitivityField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool KanatypeSensitivitySpecified
        {
            get { return kanatypeSensitivityFieldSpecified; }
            set { kanatypeSensitivityFieldSpecified = value; }
        }

        /// <remarks/>
        public SensitivityEnum WidthSensitivity
        {
            get { return widthSensitivityField; }
            set { widthSensitivityField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool WidthSensitivitySpecified
        {
            get { return widthSensitivityFieldSpecified; }
            set { widthSensitivityFieldSpecified = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum SensitivityEnum
    {
        /// <remarks/>
        True,

        /// <remarks/>
        False,

        /// <remarks/>
        Auto,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataRetrievalPlan
    {
        DataSetDefinition dataSetField;
        DataSourceDefinitionOrReference itemField;

        /// <remarks/>
        [XmlElement("DataSourceDefinition", typeof (DataSourceDefinition))]
        [XmlElement("DataSourceReference", typeof (DataSourceReference))]
        [XmlElement("InvalidDataSourceReference", typeof (InvalidDataSourceReference))]
        public DataSourceDefinitionOrReference Item
        {
            get { return itemField; }
            set { itemField = value; }
        }

        /// <remarks/>
        public DataSetDefinition DataSet
        {
            get { return dataSetField; }
            set { dataSetField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSourceDefinition : DataSourceDefinitionOrReference
    {
        string connectStringField;

        CredentialRetrievalEnum credentialRetrievalField;
        bool enabledField;

        bool enabledFieldSpecified;
        string extensionField;

        bool impersonateUserField;

        bool impersonateUserFieldSpecified;
        string passwordField;

        string promptField;

        string userNameField;
        bool windowsCredentialsField;

        /// <remarks/>
        public string Extension
        {
            get { return extensionField; }
            set { extensionField = value; }
        }

        /// <remarks/>
        public string ConnectString
        {
            get { return connectStringField; }
            set { connectStringField = value; }
        }

        /// <remarks/>
        public CredentialRetrievalEnum CredentialRetrieval
        {
            get { return credentialRetrievalField; }
            set { credentialRetrievalField = value; }
        }

        /// <remarks/>
        public bool WindowsCredentials
        {
            get { return windowsCredentialsField; }
            set { windowsCredentialsField = value; }
        }

        /// <remarks/>
        public bool ImpersonateUser
        {
            get { return impersonateUserField; }
            set { impersonateUserField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ImpersonateUserSpecified
        {
            get { return impersonateUserFieldSpecified; }
            set { impersonateUserFieldSpecified = value; }
        }

        /// <remarks/>
        public string Prompt
        {
            get { return promptField; }
            set { promptField = value; }
        }

        /// <remarks/>
        public string UserName
        {
            get { return userNameField; }
            set { userNameField = value; }
        }

        /// <remarks/>
        public string Password
        {
            get { return passwordField; }
            set { passwordField = value; }
        }

        /// <remarks/>
        public bool Enabled
        {
            get { return enabledField; }
            set { enabledField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool EnabledSpecified
        {
            get { return enabledFieldSpecified; }
            set { enabledFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum CredentialRetrievalEnum
    {
        /// <remarks/>
        Prompt,

        /// <remarks/>
        Store,

        /// <remarks/>
        Integrated,

        /// <remarks/>
        None,
    }

    /// <remarks/>
    [XmlInclude(typeof (DataSourceReference))]
    [XmlInclude(typeof (InvalidDataSourceReference))]
    [XmlInclude(typeof (DataSourceDefinition))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSourceDefinitionOrReference
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSourceReference : DataSourceDefinitionOrReference
    {
        string referenceField;

        /// <remarks/>
        public string Reference
        {
            get { return referenceField; }
            set { referenceField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class InvalidDataSourceReference : DataSourceDefinitionOrReference
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Schedule
    {
        string creatorField;
        ScheduleDefinition definitionField;

        string descriptionField;

        DateTime lastRunTimeField;

        bool lastRunTimeFieldSpecified;
        string nameField;
        DateTime nextRunTimeField;

        bool nextRunTimeFieldSpecified;

        bool referencesPresentField;
        string scheduleIDField;

        ScheduleStateEnum stateField;

        /// <remarks/>
        public string ScheduleID
        {
            get { return scheduleIDField; }
            set { scheduleIDField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public ScheduleDefinition Definition
        {
            get { return definitionField; }
            set { definitionField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public string Creator
        {
            get { return creatorField; }
            set { creatorField = value; }
        }

        /// <remarks/>
        public DateTime NextRunTime
        {
            get { return nextRunTimeField; }
            set { nextRunTimeField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool NextRunTimeSpecified
        {
            get { return nextRunTimeFieldSpecified; }
            set { nextRunTimeFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime LastRunTime
        {
            get { return lastRunTimeField; }
            set { lastRunTimeField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool LastRunTimeSpecified
        {
            get { return lastRunTimeFieldSpecified; }
            set { lastRunTimeFieldSpecified = value; }
        }

        /// <remarks/>
        public bool ReferencesPresent
        {
            get { return referencesPresentField; }
            set { referencesPresentField = value; }
        }

        /// <remarks/>
        public ScheduleStateEnum State
        {
            get { return stateField; }
            set { stateField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ScheduleDefinition : ScheduleDefinitionOrReference
    {
        DateTime endDateField;

        bool endDateFieldSpecified;

        RecurrencePattern itemField;
        DateTime startDateTimeField;

        /// <remarks/>
        public DateTime StartDateTime
        {
            get { return startDateTimeField; }
            set { startDateTimeField = value; }
        }

        /// <remarks/>
        public DateTime EndDate
        {
            get { return endDateField; }
            set { endDateField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool EndDateSpecified
        {
            get { return endDateFieldSpecified; }
            set { endDateFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlElement("DailyRecurrence", typeof (DailyRecurrence))]
        [XmlElement("MinuteRecurrence", typeof (MinuteRecurrence))]
        [XmlElement("MonthlyDOWRecurrence", typeof (MonthlyDOWRecurrence))]
        [XmlElement("MonthlyRecurrence", typeof (MonthlyRecurrence))]
        [XmlElement("WeeklyRecurrence", typeof (WeeklyRecurrence))]
        public RecurrencePattern Item
        {
            get { return itemField; }
            set { itemField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DailyRecurrence : RecurrencePattern
    {
        int daysIntervalField;

        /// <remarks/>
        public int DaysInterval
        {
            get { return daysIntervalField; }
            set { daysIntervalField = value; }
        }
    }

    /// <remarks/>
    [XmlInclude(typeof (WeeklyRecurrence))]
    [XmlInclude(typeof (MinuteRecurrence))]
    [XmlInclude(typeof (DailyRecurrence))]
    [XmlInclude(typeof (MonthlyRecurrence))]
    [XmlInclude(typeof (MonthlyDOWRecurrence))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class RecurrencePattern
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class WeeklyRecurrence : RecurrencePattern
    {
        DaysOfWeekSelector daysOfWeekField;
        int weeksIntervalField;

        bool weeksIntervalFieldSpecified;

        /// <remarks/>
        public int WeeksInterval
        {
            get { return weeksIntervalField; }
            set { weeksIntervalField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool WeeksIntervalSpecified
        {
            get { return weeksIntervalFieldSpecified; }
            set { weeksIntervalFieldSpecified = value; }
        }

        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek
        {
            get { return daysOfWeekField; }
            set { daysOfWeekField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DaysOfWeekSelector
    {
        bool fridayField;
        bool mondayField;
        bool saturdayField;
        bool sundayField;
        bool thursdayField;

        bool tuesdayField;

        bool wednesdayField;

        /// <remarks/>
        public bool Sunday
        {
            get { return sundayField; }
            set { sundayField = value; }
        }

        /// <remarks/>
        public bool Monday
        {
            get { return mondayField; }
            set { mondayField = value; }
        }

        /// <remarks/>
        public bool Tuesday
        {
            get { return tuesdayField; }
            set { tuesdayField = value; }
        }

        /// <remarks/>
        public bool Wednesday
        {
            get { return wednesdayField; }
            set { wednesdayField = value; }
        }

        /// <remarks/>
        public bool Thursday
        {
            get { return thursdayField; }
            set { thursdayField = value; }
        }

        /// <remarks/>
        public bool Friday
        {
            get { return fridayField; }
            set { fridayField = value; }
        }

        /// <remarks/>
        public bool Saturday
        {
            get { return saturdayField; }
            set { saturdayField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class MinuteRecurrence : RecurrencePattern
    {
        int minutesIntervalField;

        /// <remarks/>
        public int MinutesInterval
        {
            get { return minutesIntervalField; }
            set { minutesIntervalField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class MonthlyRecurrence : RecurrencePattern
    {
        string daysField;

        MonthsOfYearSelector monthsOfYearField;

        /// <remarks/>
        public string Days
        {
            get { return daysField; }
            set { daysField = value; }
        }

        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear
        {
            get { return monthsOfYearField; }
            set { monthsOfYearField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class MonthsOfYearSelector
    {
        bool aprilField;
        bool augustField;
        bool decemberField;
        bool februaryField;
        bool januaryField;
        bool julyField;
        bool juneField;

        bool marchField;

        bool mayField;

        bool novemberField;
        bool octoberField;
        bool septemberField;

        /// <remarks/>
        public bool January
        {
            get { return januaryField; }
            set { januaryField = value; }
        }

        /// <remarks/>
        public bool February
        {
            get { return februaryField; }
            set { februaryField = value; }
        }

        /// <remarks/>
        public bool March
        {
            get { return marchField; }
            set { marchField = value; }
        }

        /// <remarks/>
        public bool April
        {
            get { return aprilField; }
            set { aprilField = value; }
        }

        /// <remarks/>
        public bool May
        {
            get { return mayField; }
            set { mayField = value; }
        }

        /// <remarks/>
        public bool June
        {
            get { return juneField; }
            set { juneField = value; }
        }

        /// <remarks/>
        public bool July
        {
            get { return julyField; }
            set { julyField = value; }
        }

        /// <remarks/>
        public bool August
        {
            get { return augustField; }
            set { augustField = value; }
        }

        /// <remarks/>
        public bool September
        {
            get { return septemberField; }
            set { septemberField = value; }
        }

        /// <remarks/>
        public bool October
        {
            get { return octoberField; }
            set { octoberField = value; }
        }

        /// <remarks/>
        public bool November
        {
            get { return novemberField; }
            set { novemberField = value; }
        }

        /// <remarks/>
        public bool December
        {
            get { return decemberField; }
            set { decemberField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class MonthlyDOWRecurrence : RecurrencePattern
    {
        DaysOfWeekSelector daysOfWeekField;

        MonthsOfYearSelector monthsOfYearField;
        WeekNumberEnum whichWeekField;

        bool whichWeekFieldSpecified;

        /// <remarks/>
        public WeekNumberEnum WhichWeek
        {
            get { return whichWeekField; }
            set { whichWeekField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool WhichWeekSpecified
        {
            get { return whichWeekFieldSpecified; }
            set { whichWeekFieldSpecified = value; }
        }

        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek
        {
            get { return daysOfWeekField; }
            set { daysOfWeekField = value; }
        }

        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear
        {
            get { return monthsOfYearField; }
            set { monthsOfYearField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum WeekNumberEnum
    {
        /// <remarks/>
        FirstWeek,

        /// <remarks/>
        SecondWeek,

        /// <remarks/>
        ThirdWeek,

        /// <remarks/>
        FourthWeek,

        /// <remarks/>
        LastWeek,
    }

    /// <remarks/>
    [XmlInclude(typeof (ScheduleDefinition))]
    [XmlInclude(typeof (ScheduleReference))]
    [XmlInclude(typeof (NoSchedule))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ScheduleDefinitionOrReference
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ScheduleReference : ScheduleDefinitionOrReference
    {
        ScheduleDefinition definitionField;
        string scheduleIDField;

        /// <remarks/>
        public string ScheduleID
        {
            get { return scheduleIDField; }
            set { scheduleIDField = value; }
        }

        /// <remarks/>
        public ScheduleDefinition Definition
        {
            get { return definitionField; }
            set { definitionField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class NoSchedule : ScheduleDefinitionOrReference
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ScheduleStateEnum
    {
        /// <remarks/>
        Ready,

        /// <remarks/>
        Running,

        /// <remarks/>
        Paused,

        /// <remarks/>
        Expired,

        /// <remarks/>
        Failing,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ReportHistorySnapshot
    {
        DateTime creationDateField;
        string historyIDField;

        int sizeField;

        /// <remarks/>
        public string HistoryID
        {
            get { return historyIDField; }
            set { historyIDField = value; }
        }

        /// <remarks/>
        public DateTime CreationDate
        {
            get { return creationDateField; }
            set { creationDateField = value; }
        }

        /// <remarks/>
        public int Size
        {
            get { return sizeField; }
            set { sizeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSourcePrompt
    {
        string dataSourceIDField;
        string nameField;

        string promptField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DataSourceID
        {
            get { return dataSourceIDField; }
            set { dataSourceIDField = value; }
        }

        /// <remarks/>
        public string Prompt
        {
            get { return promptField; }
            set { promptField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSource
    {
        DataSourceDefinitionOrReference itemField;
        string nameField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlElement("DataSourceDefinition", typeof (DataSourceDefinition))]
        [XmlElement("DataSourceReference", typeof (DataSourceReference))]
        [XmlElement("InvalidDataSourceReference", typeof (InvalidDataSourceReference))]
        public DataSourceDefinitionOrReference Item
        {
            get { return itemField; }
            set { itemField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Job
    {
        JobActionEnum actionField;
        string descriptionField;
        string jobIDField;
        string machineField;

        string nameField;

        string pathField;

        DateTime startDateTimeField;

        JobStatusEnum statusField;
        JobTypeEnum typeField;
        string userField;

        /// <remarks/>
        public string JobID
        {
            get { return jobIDField; }
            set { jobIDField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Path
        {
            get { return pathField; }
            set { pathField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public string Machine
        {
            get { return machineField; }
            set { machineField = value; }
        }

        /// <remarks/>
        public string User
        {
            get { return userField; }
            set { userField = value; }
        }

        /// <remarks/>
        public DateTime StartDateTime
        {
            get { return startDateTimeField; }
            set { startDateTimeField = value; }
        }

        /// <remarks/>
        public JobActionEnum Action
        {
            get { return actionField; }
            set { actionField = value; }
        }

        /// <remarks/>
        public JobTypeEnum Type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        public JobStatusEnum Status
        {
            get { return statusField; }
            set { statusField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobActionEnum
    {
        /// <remarks/>
        Render,

        /// <remarks/>
        SnapshotCreation,

        /// <remarks/>
        ReportHistoryCreation,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobTypeEnum
    {
        /// <remarks/>
        User,

        /// <remarks/>
        System,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobStatusEnum
    {
        /// <remarks/>
        New,

        /// <remarks/>
        Running,

        /// <remarks/>
        CancelRequested,
    }

    /// <remarks/>
    [XmlInclude(typeof (TimeExpiration))]
    [XmlInclude(typeof (ScheduleExpiration))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ExpirationDefinition
    {
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class TimeExpiration : ExpirationDefinition
    {
        int minutesField;

        /// <remarks/>
        public int Minutes
        {
            get { return minutesField; }
            set { minutesField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ScheduleExpiration : ExpirationDefinition
    {
        ScheduleDefinitionOrReference itemField;

        /// <remarks/>
        [XmlElement("ScheduleDefinition", typeof (ScheduleDefinition))]
        [XmlElement("ScheduleReference", typeof (ScheduleReference))]
        public ScheduleDefinitionOrReference Item
        {
            get { return itemField; }
            set { itemField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class ReportParameter
    {
        bool allowBlankField;

        bool allowBlankFieldSpecified;
        string[] defaultValuesField;
        bool defaultValuesQueryBasedField;

        bool defaultValuesQueryBasedFieldSpecified;
        string[] dependenciesField;
        string errorMessageField;

        bool multiValueField;

        bool multiValueFieldSpecified;
        string nameField;
        bool nullableField;

        bool nullableFieldSpecified;

        string promptField;

        bool promptUserField;

        bool promptUserFieldSpecified;
        bool queryParameterField;

        bool queryParameterFieldSpecified;

        ParameterStateEnum stateField;

        bool stateFieldSpecified;
        ParameterTypeEnum typeField;

        bool typeFieldSpecified;
        ValidValue[] validValuesField;
        bool validValuesQueryBasedField;

        bool validValuesQueryBasedFieldSpecified;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public ParameterTypeEnum Type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool TypeSpecified
        {
            get { return typeFieldSpecified; }
            set { typeFieldSpecified = value; }
        }

        /// <remarks/>
        public bool Nullable
        {
            get { return nullableField; }
            set { nullableField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool NullableSpecified
        {
            get { return nullableFieldSpecified; }
            set { nullableFieldSpecified = value; }
        }

        /// <remarks/>
        public bool AllowBlank
        {
            get { return allowBlankField; }
            set { allowBlankField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool AllowBlankSpecified
        {
            get { return allowBlankFieldSpecified; }
            set { allowBlankFieldSpecified = value; }
        }

        /// <remarks/>
        public bool MultiValue
        {
            get { return multiValueField; }
            set { multiValueField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool MultiValueSpecified
        {
            get { return multiValueFieldSpecified; }
            set { multiValueFieldSpecified = value; }
        }

        /// <remarks/>
        public bool QueryParameter
        {
            get { return queryParameterField; }
            set { queryParameterField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool QueryParameterSpecified
        {
            get { return queryParameterFieldSpecified; }
            set { queryParameterFieldSpecified = value; }
        }

        /// <remarks/>
        public string Prompt
        {
            get { return promptField; }
            set { promptField = value; }
        }

        /// <remarks/>
        public bool PromptUser
        {
            get { return promptUserField; }
            set { promptUserField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool PromptUserSpecified
        {
            get { return promptUserFieldSpecified; }
            set { promptUserFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Dependency")]
        public string[] Dependencies
        {
            get { return dependenciesField; }
            set { dependenciesField = value; }
        }

        /// <remarks/>
        public bool ValidValuesQueryBased
        {
            get { return validValuesQueryBasedField; }
            set { validValuesQueryBasedField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ValidValuesQueryBasedSpecified
        {
            get { return validValuesQueryBasedFieldSpecified; }
            set { validValuesQueryBasedFieldSpecified = value; }
        }

        /// <remarks/>
        public ValidValue[] ValidValues
        {
            get { return validValuesField; }
            set { validValuesField = value; }
        }

        /// <remarks/>
        public bool DefaultValuesQueryBased
        {
            get { return defaultValuesQueryBasedField; }
            set { defaultValuesQueryBasedField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool DefaultValuesQueryBasedSpecified
        {
            get { return defaultValuesQueryBasedFieldSpecified; }
            set { defaultValuesQueryBasedFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Value")]
        public string[] DefaultValues
        {
            get { return defaultValuesField; }
            set { defaultValuesField = value; }
        }

        /// <remarks/>
        public ParameterStateEnum State
        {
            get { return stateField; }
            set { stateField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool StateSpecified
        {
            get { return stateFieldSpecified; }
            set { stateFieldSpecified = value; }
        }

        /// <remarks/>
        public string ErrorMessage
        {
            get { return errorMessageField; }
            set { errorMessageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ParameterTypeEnum
    {
        /// <remarks/>
        Boolean,

        /// <remarks/>
        DateTime,

        /// <remarks/>
        Integer,

        /// <remarks/>
        Float,

        /// <remarks/>
        String,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ParameterStateEnum
    {
        /// <remarks/>
        HasValidValue,

        /// <remarks/>
        MissingValidValue,

        /// <remarks/>
        HasOutstandingDependencies,

        /// <remarks/>
        DynamicValuesUnavailable,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class DataSourceCredentials
    {
        string dataSourceNameField;

        string passwordField;
        string userNameField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public string UserName
        {
            get { return userNameField; }
            set { userNameField = value; }
        }

        /// <remarks/>
        public string Password
        {
            get { return passwordField; }
            set { passwordField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Warning
    {
        string codeField;
        string messageField;

        string objectNameField;

        string objectTypeField;
        string severityField;

        /// <remarks/>
        public string Code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        public string Severity
        {
            get { return severityField; }
            set { severityField = value; }
        }

        /// <remarks/>
        public string ObjectName
        {
            get { return objectNameField; }
            set { objectNameField = value; }
        }

        /// <remarks/>
        public string ObjectType
        {
            get { return objectTypeField; }
            set { objectTypeField = value; }
        }

        /// <remarks/>
        public string Message
        {
            get { return messageField; }
            set { messageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class CatalogItem
    {
        string createdByField;
        DateTime creationDateField;

        bool creationDateFieldSpecified;
        string descriptionField;
        DateTime executionDateField;

        bool executionDateFieldSpecified;

        bool hiddenField;

        bool hiddenFieldSpecified;
        string idField;
        string mimeTypeField;
        string modifiedByField;

        DateTime modifiedDateField;

        bool modifiedDateFieldSpecified;
        string nameField;

        string pathField;
        int sizeField;

        bool sizeFieldSpecified;
        ItemTypeEnum typeField;
        string virtualPathField;

        /// <remarks/>
        public string ID
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Path
        {
            get { return pathField; }
            set { pathField = value; }
        }

        /// <remarks/>
        public string VirtualPath
        {
            get { return virtualPathField; }
            set { virtualPathField = value; }
        }

        /// <remarks/>
        public ItemTypeEnum Type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        public int Size
        {
            get { return sizeField; }
            set { sizeField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool SizeSpecified
        {
            get { return sizeFieldSpecified; }
            set { sizeFieldSpecified = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public bool Hidden
        {
            get { return hiddenField; }
            set { hiddenField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool HiddenSpecified
        {
            get { return hiddenFieldSpecified; }
            set { hiddenFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime CreationDate
        {
            get { return creationDateField; }
            set { creationDateField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool CreationDateSpecified
        {
            get { return creationDateFieldSpecified; }
            set { creationDateFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime ModifiedDate
        {
            get { return modifiedDateField; }
            set { modifiedDateField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ModifiedDateSpecified
        {
            get { return modifiedDateFieldSpecified; }
            set { modifiedDateFieldSpecified = value; }
        }

        /// <remarks/>
        public string CreatedBy
        {
            get { return createdByField; }
            set { createdByField = value; }
        }

        /// <remarks/>
        public string ModifiedBy
        {
            get { return modifiedByField; }
            set { modifiedByField = value; }
        }

        /// <remarks/>
        public string MimeType
        {
            get { return mimeTypeField; }
            set { mimeTypeField = value; }
        }

        /// <remarks/>
        public DateTime ExecutionDate
        {
            get { return executionDateField; }
            set { executionDateField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ExecutionDateSpecified
        {
            get { return executionDateFieldSpecified; }
            set { executionDateFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ItemTypeEnum
    {
        /// <remarks/>
        Unknown,

        /// <remarks/>
        Folder,

        /// <remarks/>
        Report,

        /// <remarks/>
        Resource,

        /// <remarks/>
        LinkedReport,

        /// <remarks/>
        DataSource,
    }

    /// <remarks/>
    [XmlInclude(typeof (SearchCondition))]
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class Property
    {
        string nameField;

        string valueField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public class SearchCondition : Property
    {
        ConditionEnum conditionField;

        bool conditionFieldSpecified;

        /// <remarks/>
        public ConditionEnum Condition
        {
            get { return conditionField; }
            set { conditionField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ConditionSpecified
        {
            get { return conditionFieldSpecified; }
            set { conditionFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ConditionEnum
    {
        /// <remarks/>
        Contains,

        /// <remarks/>
        Equals,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        IsNullable = false)]
    public class SessionHeader : SoapHeader
    {
        string executionDateTimeField;

        string expirationDateTimeField;
        bool isNewExecutionField;
        string sessionIdField;

        /// <remarks/>
        public string SessionId
        {
            get { return sessionIdField; }
            set { sessionIdField = value; }
        }

        /// <remarks/>
        public bool IsNewExecution
        {
            get { return isNewExecutionField; }
            set { isNewExecutionField = value; }
        }

        /// <remarks/>
        public string ExecutionDateTime
        {
            get { return executionDateTimeField; }
            set { executionDateTimeField = value; }
        }

        /// <remarks/>
        public string ExpirationDateTime
        {
            get { return expirationDateTimeField; }
            set { expirationDateTimeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        IsNullable = false)]
    public class ItemNamespaceHeader : SoapHeader
    {
        ItemNamespaceEnum itemNamespaceField;

        /// <remarks/>
        public ItemNamespaceEnum ItemNamespace
        {
            get { return itemNamespaceField; }
            set { itemNamespaceField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ItemNamespaceEnum
    {
        /// <remarks/>
        PathBased,

        /// <remarks/>
        GUIDBased,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [XmlRoot(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices",
        IsNullable = false)]
    public class BatchHeader : SoapHeader
    {
        string batchIDField;

        /// <remarks/>
        public string BatchID
        {
            get { return batchIDField; }
            set { batchIDField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ExecutionSettingEnum
    {
        /// <remarks/>
        Live,

        /// <remarks/>
        Snapshot,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [Serializable]
    [XmlType(Namespace = "http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum BooleanOperatorEnum
    {
        /// <remarks/>
        And,

        /// <remarks/>
        Or,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSecureMethodsCompletedEventHandler(object sender, ListSecureMethodsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSecureMethodsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSecureMethodsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateBatchCompletedEventHandler(object sender, CreateBatchCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateBatchCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateBatchCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CancelBatchCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ExecuteBatchCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPropertiesCompletedEventHandler(object sender, GetSystemPropertiesCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetSystemPropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetSystemPropertiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Property[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Property[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetSystemPropertiesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DeleteItemCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void MoveItemCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListChildrenCompletedEventHandler(object sender, ListChildrenCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListChildrenCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListChildrenCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public CatalogItem[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CatalogItem[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetPropertiesCompletedEventHandler(object sender, GetPropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetPropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetPropertiesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Property[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Property[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetPropertiesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetItemTypeCompletedEventHandler(object sender, GetItemTypeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetItemTypeCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetItemTypeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ItemTypeEnum Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ItemTypeEnum) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateFolderCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateReportCompletedEventHandler(object sender, CreateReportCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateReportCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateReportCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Warning[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Warning[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportDefinitionCompletedEventHandler(object sender, GetReportDefinitionCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportDefinitionCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportDefinitionCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportDefinitionCompletedEventHandler(object sender, SetReportDefinitionCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SetReportDefinitionCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal SetReportDefinitionCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Warning[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Warning[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateResourceCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetResourceContentsCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetResourceContentsCompletedEventHandler(object sender, GetResourceContentsCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetResourceContentsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetResourceContentsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[]) (results[0]));
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportParametersCompletedEventHandler(object sender, GetReportParametersCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportParametersCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportParametersCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ReportParameter[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ReportParameter[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportParametersCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateLinkedReportCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportLinkCompletedEventHandler(object sender, GetReportLinkCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportLinkCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportLinkCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportLinkCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListLinkedReportsCompletedEventHandler(object sender, ListLinkedReportsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListLinkedReportsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListLinkedReportsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public CatalogItem[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CatalogItem[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void RenderCompletedEventHandler(object sender, RenderCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class RenderCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal RenderCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[]) (results[0]));
            }
        }

        /// <remarks/>
        public string Encoding
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[1]));
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[2]));
            }
        }

        /// <remarks/>
        public ParameterValue[] ParametersUsed
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ParameterValue[]) (results[3]));
            }
        }

        /// <remarks/>
        public Warning[] Warnings
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Warning[]) (results[4]));
            }
        }

        /// <remarks/>
        public string[] StreamIds
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[5]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void RenderStreamCompletedEventHandler(object sender, RenderStreamCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class RenderStreamCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal RenderStreamCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[]) (results[0]));
            }
        }

        /// <remarks/>
        public string Encoding
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[1]));
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetRenderResourceCompletedEventHandler(object sender, GetRenderResourceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetRenderResourceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetRenderResourceCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[]) (results[0]));
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetExecutionOptionsCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetExecutionOptionsCompletedEventHandler(object sender, GetExecutionOptionsCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetExecutionOptionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetExecutionOptionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ExecutionSettingEnum Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExecutionSettingEnum) (results[0]));
            }
        }

        /// <remarks/>
        public ScheduleDefinitionOrReference Item
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ScheduleDefinitionOrReference) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetCacheOptionsCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetCacheOptionsCompletedEventHandler(object sender, GetCacheOptionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetCacheOptionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetCacheOptionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[0]));
            }
        }

        /// <remarks/>
        public ExpirationDefinition Item
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExpirationDefinition) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void UpdateReportExecutionSnapshotCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void FlushCacheCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListJobsCompletedEventHandler(object sender, ListJobsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListJobsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListJobsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Job[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Job[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CancelJobCompletedEventHandler(object sender, CancelJobCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CancelJobCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CancelJobCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateDataSourceCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetDataSourceContentsCompletedEventHandler(
        object sender, GetDataSourceContentsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetDataSourceContentsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetDataSourceContentsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public DataSourceDefinition Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataSourceDefinition) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetDataSourceContentsCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void EnableDataSourceCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DisableDataSourceCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListReportsUsingDataSourceCompletedEventHandler(
        object sender, ListReportsUsingDataSourceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListReportsUsingDataSourceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListReportsUsingDataSourceCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                              object userState) :
                                                                  base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public CatalogItem[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CatalogItem[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportDataSourcesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportDataSourcesCompletedEventHandler(
        object sender, GetReportDataSourcesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportDataSourcesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportDataSourcesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                        object userState) :
                                                            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public DataSource[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataSource[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportDataSourcePromptsCompletedEventHandler(
        object sender, GetReportDataSourcePromptsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportDataSourcePromptsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportDataSourcePromptsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                              object userState) :
                                                                  base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public DataSourcePrompt[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataSourcePrompt[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateReportHistorySnapshotCompletedEventHandler(
        object sender, CreateReportHistorySnapshotCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateReportHistorySnapshotCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateReportHistorySnapshotCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                               object userState) :
                                                                   base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }

        /// <remarks/>
        public Warning[] Warnings
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Warning[]) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportHistoryOptionsCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportHistoryOptionsCompletedEventHandler(
        object sender, GetReportHistoryOptionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportHistoryOptionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportHistoryOptionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                           object userState) :
                                                               base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[0]));
            }
        }

        /// <remarks/>
        public bool KeepExecutionSnapshots
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[1]));
            }
        }

        /// <remarks/>
        public ScheduleDefinitionOrReference Item
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ScheduleDefinitionOrReference) (results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetReportHistoryLimitCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetReportHistoryLimitCompletedEventHandler(
        object sender, GetReportHistoryLimitCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetReportHistoryLimitCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetReportHistoryLimitCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((int) (results[0]));
            }
        }

        /// <remarks/>
        public bool IsSystem
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[1]));
            }
        }

        /// <remarks/>
        public int SystemLimit
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((int) (results[2]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListReportHistoryCompletedEventHandler(object sender, ListReportHistoryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListReportHistoryCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListReportHistoryCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ReportHistorySnapshot[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ReportHistorySnapshot[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DeleteReportHistorySnapshotCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void FindItemsCompletedEventHandler(object sender, FindItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class FindItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal FindItemsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public CatalogItem[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CatalogItem[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateScheduleCompletedEventHandler(object sender, CreateScheduleCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateScheduleCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateScheduleCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DeleteScheduleCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetSchedulePropertiesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetSchedulePropertiesCompletedEventHandler(
        object sender, GetSchedulePropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetSchedulePropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetSchedulePropertiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Schedule Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Schedule) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListScheduledReportsCompletedEventHandler(
        object sender, ListScheduledReportsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListScheduledReportsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListScheduledReportsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                        object userState) :
                                                            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public CatalogItem[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CatalogItem[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSchedulesCompletedEventHandler(object sender, ListSchedulesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSchedulesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSchedulesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Schedule[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Schedule[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void PauseScheduleCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ResumeScheduleCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateSubscriptionCompletedEventHandler(object sender, CreateSubscriptionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateSubscriptionCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateSubscriptionCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateDataDrivenSubscriptionCompletedEventHandler(
        object sender, CreateDataDrivenSubscriptionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class CreateDataDrivenSubscriptionCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal CreateDataDrivenSubscriptionCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                                object userState) :
                                                                    base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetSubscriptionPropertiesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetDataDrivenSubscriptionPropertiesCompletedEventHandler(
        object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetSubscriptionPropertiesCompletedEventHandler(
        object sender, GetSubscriptionPropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetSubscriptionPropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetSubscriptionPropertiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                             object userState) :
                                                                 base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }

        /// <remarks/>
        public ExtensionSettings ExtensionSettings
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExtensionSettings) (results[1]));
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[2]));
            }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ActiveState) (results[3]));
            }
        }

        /// <remarks/>
        public string Status
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[4]));
            }
        }

        /// <remarks/>
        public string EventType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[5]));
            }
        }

        /// <remarks/>
        public string MatchData
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[6]));
            }
        }

        /// <remarks/>
        public ParameterValue[] Parameters
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ParameterValue[]) (results[7]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetDataDrivenSubscriptionPropertiesCompletedEventHandler(
        object sender, GetDataDrivenSubscriptionPropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetDataDrivenSubscriptionPropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetDataDrivenSubscriptionPropertiesCompletedEventArgs(object[] results, Exception exception,
                                                                       bool cancelled, object userState) :
                                                                           base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }

        /// <remarks/>
        public ExtensionSettings ExtensionSettings
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExtensionSettings) (results[1]));
            }
        }

        /// <remarks/>
        public DataRetrievalPlan DataRetrievalPlan
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataRetrievalPlan) (results[2]));
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[3]));
            }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ActiveState) (results[4]));
            }
        }

        /// <remarks/>
        public string Status
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[5]));
            }
        }

        /// <remarks/>
        public string EventType
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[6]));
            }
        }

        /// <remarks/>
        public string MatchData
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[7]));
            }
        }

        /// <remarks/>
        public ParameterValueOrFieldReference[] Parameters
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ParameterValueOrFieldReference[]) (results[8]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DeleteSubscriptionCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void PrepareQueryCompletedEventHandler(object sender, PrepareQueryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class PrepareQueryCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal PrepareQueryCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public DataSetDefinition Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataSetDefinition) (results[0]));
            }
        }

        /// <remarks/>
        public bool Changed
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetExtensionSettingsCompletedEventHandler(
        object sender, GetExtensionSettingsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetExtensionSettingsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetExtensionSettingsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                        object userState) :
                                                            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ExtensionParameter[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExtensionParameter[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ValidateExtensionSettingsCompletedEventHandler(
        object sender, ValidateExtensionSettingsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ValidateExtensionSettingsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ValidateExtensionSettingsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                             object userState) :
                                                                 base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public ExtensionParameter[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ExtensionParameter[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSubscriptionsCompletedEventHandler(object sender, ListSubscriptionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSubscriptionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSubscriptionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Subscription[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Subscription[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSubscriptionsUsingDataSourceCompletedEventHandler(
        object sender, ListSubscriptionsUsingDataSourceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSubscriptionsUsingDataSourceCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSubscriptionsUsingDataSourceCompletedEventArgs(object[] results, Exception exception,
                                                                    bool cancelled, object userState) :
                                                                        base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Subscription[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Subscription[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListExtensionsCompletedEventHandler(object sender, ListExtensionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListExtensionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListExtensionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Extension[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Extension[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListEventsCompletedEventHandler(object sender, ListEventsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListEventsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListEventsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Event[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Event[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void FireEventCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSystemTasksCompletedEventHandler(object sender, ListSystemTasksCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSystemTasksCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSystemTasksCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Task[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Task[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListTasksCompletedEventHandler(object sender, ListTasksCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListTasksCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListTasksCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Task[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Task[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListSystemRolesCompletedEventHandler(object sender, ListSystemRolesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListSystemRolesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListSystemRolesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Role[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Role[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void ListRolesCompletedEventHandler(object sender, ListRolesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListRolesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal ListRolesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Role[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Role[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void CreateRoleCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetRolePropertiesCompletedEventHandler(object sender, GetRolePropertiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetRolePropertiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetRolePropertiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Task[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Task[]) (results[0]));
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetRolePropertiesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPoliciesCompletedEventHandler(object sender, GetSystemPoliciesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetSystemPoliciesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetSystemPoliciesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Policy[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Policy[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetSystemPoliciesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetPoliciesCompletedEventHandler(object sender, GetPoliciesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetPoliciesCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetPoliciesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public Policy[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Policy[]) (results[0]));
            }
        }

        /// <remarks/>
        public bool InheritParent
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool) (results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void SetPoliciesCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void InheritParentSecurityCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPermissionsCompletedEventHandler(
        object sender, GetSystemPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetSystemPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetSystemPermissionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                        object userState) :
                                                            base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void GetPermissionsCompletedEventHandler(object sender, GetPermissionsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetPermissionsCompletedEventArgs : AsyncCompletedEventArgs
    {
        object[] results;

        internal GetPermissionsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void LogonUserCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    public delegate void LogoffCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    #pragma warning restore 649, 1717
}